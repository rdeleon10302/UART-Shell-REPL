
uart_repl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08001e94  08001e94  00002e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a8  080021a8  0000406c  2**0
                  CONTENTS
  4 .ARM          00000008  080021a8  080021a8  000031a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021b0  080021b0  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021b0  080021b0  000031b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021b4  080021b4  000031b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080021b8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000006c  08002224  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002224  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dc0  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000083c  00000000  00000000  00005e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00006698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000152  00000000  00000000  00006858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbc1  00000000  00000000  000069aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002421  00000000  00000000  0001656b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055926  00000000  00000000  0001898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006e2b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011c4  00000000  00000000  0006e2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0006f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e7c 	.word	0x08001e7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08001e7c 	.word	0x08001e7c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	db12      	blt.n	8000314 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	f003 021f 	and.w	r2, r3, #31
 80002f4:	490a      	ldr	r1, [pc, #40]	@ (8000320 <__NVIC_DisableIRQ+0x44>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	095b      	lsrs	r3, r3, #5
 80002fc:	2001      	movs	r0, #1
 80002fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000302:	3320      	adds	r3, #32
 8000304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000308:	f3bf 8f4f 	dsb	sy
}
 800030c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800030e:	f3bf 8f6f 	isb	sy
}
 8000312:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e000e100 	.word	0xe000e100

08000324 <main>:
};



// Main function
int main(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b09c      	sub	sp, #112	@ 0x70
 8000328:	af00      	add	r7, sp, #0
    SystemInit();
 800032a:	f000 fa23 	bl	8000774 <SystemInit>
    uart2_rxtx_init();
 800032e:	f000 fa55 	bl	80007dc <uart2_rxtx_init>

    char command_buffer[BUFFER_SIZE];

    while (1) {
    	NVIC_DisableIRQ(USART2_IRQn);
 8000332:	2026      	movs	r0, #38	@ 0x26
 8000334:	f7ff ffd2 	bl	80002dc <__NVIC_DisableIRQ>
    	NVIC_EnableIRQ(USART2_IRQn);
 8000338:	2026      	movs	r0, #38	@ 0x26
 800033a:	f7ff ffb1 	bl	80002a0 <__NVIC_EnableIRQ>
        uart2_write("\rEnter command: ");
 800033e:	4821      	ldr	r0, [pc, #132]	@ (80003c4 <main+0xa0>)
 8000340:	f000 fad2 	bl	80008e8 <uart2_write>
        int i = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NVIC_DisableIRQ(USART2_IRQn);
 8000348:	2026      	movs	r0, #38	@ 0x26
 800034a:	f7ff ffc7 	bl	80002dc <__NVIC_DisableIRQ>

        // Read command from UART, make sure to process each character properly
        while (i < BUFFER_SIZE - 1) {
 800034e:	e01e      	b.n	800038e <main+0x6a>
            char received = uart2_read(); // Blocking read
 8000350:	f000 fab6 	bl	80008c0 <uart2_read>
 8000354:	4603      	mov	r3, r0
 8000356:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            char output[2] = {received, '\0'};  // Create a string with the character and a null terminator
 800035a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800035e:	703b      	strb	r3, [r7, #0]
 8000360:	2300      	movs	r3, #0
 8000362:	707b      	strb	r3, [r7, #1]
            uart2_write(output);  // Write the string
 8000364:	463b      	mov	r3, r7
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fabe 	bl	80008e8 <uart2_write>

            if (received == '\n' || received == '\r') {
 800036c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000370:	2b0a      	cmp	r3, #10
 8000372:	d00f      	beq.n	8000394 <main+0x70>
 8000374:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000378:	2b0d      	cmp	r3, #13
 800037a:	d00b      	beq.n	8000394 <main+0x70>
                break; // End of command
            }

            command_buffer[i++] = received;
 800037c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800037e:	1c5a      	adds	r2, r3, #1
 8000380:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000382:	3370      	adds	r3, #112	@ 0x70
 8000384:	443b      	add	r3, r7
 8000386:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800038a:	f803 2c6c 	strb.w	r2, [r3, #-108]
        while (i < BUFFER_SIZE - 1) {
 800038e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000390:	2b62      	cmp	r3, #98	@ 0x62
 8000392:	dddd      	ble.n	8000350 <main+0x2c>
        }

        command_buffer[i] = '\0'; // Null-terminate the string
 8000394:	1d3a      	adds	r2, r7, #4
 8000396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000398:	4413      	add	r3, r2
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
        NVIC_EnableIRQ(USART2_IRQn);
 800039e:	2026      	movs	r0, #38	@ 0x26
 80003a0:	f7ff ff7e 	bl	80002a0 <__NVIC_EnableIRQ>

        // Debugging: Print the whole command received
        uart2_write("\nFull command received: ");
 80003a4:	4808      	ldr	r0, [pc, #32]	@ (80003c8 <main+0xa4>)
 80003a6:	f000 fa9f 	bl	80008e8 <uart2_write>
        uart2_write(command_buffer);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fa9b 	bl	80008e8 <uart2_write>
        uart2_write("\n");
 80003b2:	4806      	ldr	r0, [pc, #24]	@ (80003cc <main+0xa8>)
 80003b4:	f000 fa98 	bl	80008e8 <uart2_write>

        // Process the command
        process_command(command_buffer);
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f822 	bl	8000404 <process_command>
    while (1) {
 80003c0:	e7b7      	b.n	8000332 <main+0xe>
 80003c2:	bf00      	nop
 80003c4:	08001ea0 	.word	0x08001ea0
 80003c8:	08001eb4 	.word	0x08001eb4
 80003cc:	08001ed0 	.word	0x08001ed0

080003d0 <USART2_IRQHandler>:



// USART2 interrupt handler
void USART2_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
    /* Check if RXNE is set */
    if (USART2->SR & SR_RXNE)
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <USART2_IRQHandler+0x30>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00a      	beq.n	80003f8 <USART2_IRQHandler+0x28>
    {
        char received = (char)(USART2->DR); // Read received data
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <USART2_IRQHandler+0x30>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	71fb      	strb	r3, [r7, #7]
        uart2_write((char[]){received, '\0'}); // Echo received data as a string
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	713b      	strb	r3, [r7, #4]
 80003ec:	2300      	movs	r3, #0
 80003ee:	717b      	strb	r3, [r7, #5]
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fa78 	bl	80008e8 <uart2_write>
    }
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40004400 	.word	0x40004400

08000404 <process_command>:

// Function implementations for commands
void process_command(char *command) {
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    char *token = strtok(command, " ");
 800040c:	491d      	ldr	r1, [pc, #116]	@ (8000484 <process_command+0x80>)
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 fc90 	bl	8000d34 <strtok>
 8000414:	60b8      	str	r0, [r7, #8]

    if (token == NULL) {
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d103      	bne.n	8000424 <process_command+0x20>
        uart2_write("No command entered\n");
 800041c:	481a      	ldr	r0, [pc, #104]	@ (8000488 <process_command+0x84>)
 800041e:	f000 fa63 	bl	80008e8 <uart2_write>
        return;
 8000422:	e02c      	b.n	800047e <process_command+0x7a>
    }

    // Debugging: Print the token received
    uart2_write("\rCommand token: ");
 8000424:	4819      	ldr	r0, [pc, #100]	@ (800048c <process_command+0x88>)
 8000426:	f000 fa5f 	bl	80008e8 <uart2_write>
    uart2_write(token);
 800042a:	68b8      	ldr	r0, [r7, #8]
 800042c:	f000 fa5c 	bl	80008e8 <uart2_write>
    uart2_write("\n");
 8000430:	4817      	ldr	r0, [pc, #92]	@ (8000490 <process_command+0x8c>)
 8000432:	f000 fa59 	bl	80008e8 <uart2_write>

    // Iterate through the command list and find a match
    for (size_t i = 0; i < sizeof(command_list) / sizeof(Command); i++) {
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	e01a      	b.n	8000472 <process_command+0x6e>
        if (strcmp(token, command_list[i].command) == 0) {
 800043c:	4a15      	ldr	r2, [pc, #84]	@ (8000494 <process_command+0x90>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000444:	4619      	mov	r1, r3
 8000446:	68b8      	ldr	r0, [r7, #8]
 8000448:	f7ff feca 	bl	80001e0 <strcmp>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10c      	bne.n	800046c <process_command+0x68>
            // Pass the remaining part of the command as args
            command_list[i].handler(strtok(NULL, ""));
 8000452:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <process_command+0x90>)
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	4413      	add	r3, r2
 800045a:	685c      	ldr	r4, [r3, #4]
 800045c:	490e      	ldr	r1, [pc, #56]	@ (8000498 <process_command+0x94>)
 800045e:	2000      	movs	r0, #0
 8000460:	f000 fc68 	bl	8000d34 <strtok>
 8000464:	4603      	mov	r3, r0
 8000466:	4618      	mov	r0, r3
 8000468:	47a0      	blx	r4
            return;
 800046a:	e008      	b.n	800047e <process_command+0x7a>
    for (size_t i = 0; i < sizeof(command_list) / sizeof(Command); i++) {
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3301      	adds	r3, #1
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d9e1      	bls.n	800043c <process_command+0x38>
        }
    }

    uart2_write("\rUnknown command\n");
 8000478:	4808      	ldr	r0, [pc, #32]	@ (800049c <process_command+0x98>)
 800047a:	f000 fa35 	bl	80008e8 <uart2_write>
}
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bd90      	pop	{r4, r7, pc}
 8000484:	08001ed4 	.word	0x08001ed4
 8000488:	08001ed8 	.word	0x08001ed8
 800048c:	08001eec 	.word	0x08001eec
 8000490:	08001ed0 	.word	0x08001ed0
 8000494:	20000000 	.word	0x20000000
 8000498:	08001f00 	.word	0x08001f00
 800049c:	08001f04 	.word	0x08001f04

080004a0 <set_pin_handler>:


void set_pin_handler(char *args) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b094      	sub	sp, #80	@ 0x50
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
    if (args) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d037      	beq.n	800051e <set_pin_handler+0x7e>
        char *pin_str = strtok(args, " ");
 80004ae:	491f      	ldr	r1, [pc, #124]	@ (800052c <set_pin_handler+0x8c>)
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f000 fc3f 	bl	8000d34 <strtok>
 80004b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (pin_str) {
 80004b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d02b      	beq.n	8000516 <set_pin_handler+0x76>
            int pin = atoi(pin_str); // Convert first argument to integer
 80004be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80004c0:	f000 fa81 	bl	80009c6 <atoi>
 80004c4:	64b8      	str	r0, [r7, #72]	@ 0x48

            char *value_str = strtok(NULL, " "); // Get second argument
 80004c6:	4919      	ldr	r1, [pc, #100]	@ (800052c <set_pin_handler+0x8c>)
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 fc33 	bl	8000d34 <strtok>
 80004ce:	6478      	str	r0, [r7, #68]	@ 0x44
            if (value_str) {
 80004d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d01b      	beq.n	800050e <set_pin_handler+0x6e>
                int value = atoi(value_str); // Convert second argument to integer (0 or 1)
 80004d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80004d8:	f000 fa75 	bl	80009c6 <atoi>
 80004dc:	6438      	str	r0, [r7, #64]	@ 0x40

                // Set the pin using the GPIO_WritePin function
                GPIO_WritePin(GPIOA, (1 << pin), value);  // Correct usage
 80004de:	2201      	movs	r2, #1
 80004e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	4619      	mov	r1, r3
 80004ee:	4810      	ldr	r0, [pc, #64]	@ (8000530 <set_pin_handler+0x90>)
 80004f0:	f000 f85a 	bl	80005a8 <GPIO_WritePin>

                // Simulate setting the pin
                char response[50];
                sprintf(response, "\rSet pin %d to %d\n", pin, value);
 80004f4:	f107 000c 	add.w	r0, r7, #12
 80004f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80004fc:	490d      	ldr	r1, [pc, #52]	@ (8000534 <set_pin_handler+0x94>)
 80004fe:	f000 fbad 	bl	8000c5c <siprintf>
                uart2_write(response);
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f9ee 	bl	80008e8 <uart2_write>
            uart2_write("\rMissing first argument (pin)\n");
        }
    } else {
        uart2_write("\rNo arguments provided for SET\n");
    }
}
 800050c:	e00a      	b.n	8000524 <set_pin_handler+0x84>
                uart2_write("\rMissing second argument (value)\n");
 800050e:	480a      	ldr	r0, [pc, #40]	@ (8000538 <set_pin_handler+0x98>)
 8000510:	f000 f9ea 	bl	80008e8 <uart2_write>
}
 8000514:	e006      	b.n	8000524 <set_pin_handler+0x84>
            uart2_write("\rMissing first argument (pin)\n");
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <set_pin_handler+0x9c>)
 8000518:	f000 f9e6 	bl	80008e8 <uart2_write>
}
 800051c:	e002      	b.n	8000524 <set_pin_handler+0x84>
        uart2_write("\rNo arguments provided for SET\n");
 800051e:	4808      	ldr	r0, [pc, #32]	@ (8000540 <set_pin_handler+0xa0>)
 8000520:	f000 f9e2 	bl	80008e8 <uart2_write>
}
 8000524:	bf00      	nop
 8000526:	3750      	adds	r7, #80	@ 0x50
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	08001ed4 	.word	0x08001ed4
 8000530:	40020000 	.word	0x40020000
 8000534:	08001f18 	.word	0x08001f18
 8000538:	08001f2c 	.word	0x08001f2c
 800053c:	08001f50 	.word	0x08001f50
 8000540:	08001f70 	.word	0x08001f70

08000544 <read_pin_handler>:


void read_pin_handler(char *args) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    if (args) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d01d      	beq.n	800058e <read_pin_handler+0x4a>
        int pin = atoi(args); // Get the pin number
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f000 fa37 	bl	80009c6 <atoi>
 8000558:	62f8      	str	r0, [r7, #44]	@ 0x2c
        int value = (GPIOA->ODR & (1 << pin)) ? 1 : 0; // Check the ODR instead of IDR
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <read_pin_handler+0x58>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	2101      	movs	r1, #1
 8000560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4013      	ands	r3, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28
        char response[30];
        sprintf(response, "\rPin %d state: %d\n", pin, value);
 8000574:	f107 0008 	add.w	r0, r7, #8
 8000578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800057a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800057c:	4908      	ldr	r1, [pc, #32]	@ (80005a0 <read_pin_handler+0x5c>)
 800057e:	f000 fb6d 	bl	8000c5c <siprintf>
        uart2_write(response);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f9ae 	bl	80008e8 <uart2_write>
    } else {
        uart2_write("\rMissing arguments for READ_PIN\n");
    }
}
 800058c:	e002      	b.n	8000594 <read_pin_handler+0x50>
        uart2_write("\rMissing arguments for READ_PIN\n");
 800058e:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <read_pin_handler+0x60>)
 8000590:	f000 f9aa 	bl	80008e8 <uart2_write>
}
 8000594:	bf00      	nop
 8000596:	3730      	adds	r7, #48	@ 0x30
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40020000 	.word	0x40020000
 80005a0:	08001f90 	.word	0x08001f90
 80005a4:	08001fa4 	.word	0x08001fa4

080005a8 <GPIO_WritePin>:


// GPIO functions
void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t Pin, uint8_t Value) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	807b      	strh	r3, [r7, #2]
 80005b4:	4613      	mov	r3, r2
 80005b6:	707b      	strb	r3, [r7, #1]
    if (Value) {
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <GPIO_WritePin+0x24>
        GPIOx->ODR |= Pin; // Set pin high
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	431a      	orrs	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	615a      	str	r2, [r3, #20]
    } else {
        GPIOx->ODR &= ~Pin; // Set pin low
    }
}
 80005ca:	e006      	b.n	80005da <GPIO_WritePin+0x32>
        GPIOx->ODR &= ~Pin; // Set pin low
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	887a      	ldrh	r2, [r7, #2]
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	401a      	ands	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	615a      	str	r2, [r3, #20]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  return 1;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_kill>:

int _kill(int pid, int sig)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000600:	f000 fc3a 	bl	8000e78 <__errno>
 8000604:	4603      	mov	r3, r0
 8000606:	2216      	movs	r2, #22
 8000608:	601a      	str	r2, [r3, #0]
  return -1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_exit>:

void _exit (int status)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800061e:	f04f 31ff 	mov.w	r1, #4294967295
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffe7 	bl	80005f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <_exit+0x12>

0800062c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e00a      	b.n	8000654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800063e:	f3af 8000 	nop.w
 8000642:	4601      	mov	r1, r0
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	b2ca      	uxtb	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf0      	blt.n	800063e <_read+0x12>
  }

  return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e009      	b.n	800068c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf1      	blt.n	8000678 <_write+0x12>
  }
  return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_close>:

int _close(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006c6:	605a      	str	r2, [r3, #4]
  return 0;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <_isatty>:

int _isatty(int file)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000710:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <_sbrk+0x5c>)
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <_sbrk+0x60>)
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <_sbrk+0x64>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <_sbrk+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	429a      	cmp	r2, r3
 8000736:	d207      	bcs.n	8000748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000738:	f000 fb9e 	bl	8000e78 <__errno>
 800073c:	4603      	mov	r3, r0
 800073e:	220c      	movs	r2, #12
 8000740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	e009      	b.n	800075c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	4a05      	ldr	r2, [pc, #20]	@ (800076c <_sbrk+0x64>)
 8000758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20020000 	.word	0x20020000
 8000768:	00000400 	.word	0x00000400
 800076c:	20000088 	.word	0x20000088
 8000770:	200001d8 	.word	0x200001d8

08000774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <SystemInit+0x28>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800077e:	4a07      	ldr	r2, [pc, #28]	@ (800079c <SystemInit+0x28>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <SystemInit+0x28>)
 800078a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800078e:	609a      	str	r2, [r3, #8]
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4907      	ldr	r1, [pc, #28]	@ (80007d8 <__NVIC_EnableIRQ+0x38>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100

080007dc <uart2_rxtx_init>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(char *data); // Function prototype

void uart2_rxtx_init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	/*********Configure UART GPIO pin********/
	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 80007e0:	4b33      	ldr	r3, [pc, #204]	@ (80008b0 <uart2_rxtx_init+0xd4>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e4:	4a32      	ldr	r2, [pc, #200]	@ (80008b0 <uart2_rxtx_init+0xd4>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 and PA3 to alternate function mode*/
	GPIOA->MODER &=~ ((1U<<4) | (1U<<6));
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 80007f2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80007f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  ((1U<<5) | (1U<<7));
 80007f8:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a2d      	ldr	r2, [pc, #180]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 80007fe:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000802:	6013      	str	r3, [r2, #0]

	/* Configure PA5 as output */
	GPIOA->MODER &= ~(1U<<11);
 8000804:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a2a      	ldr	r2, [pc, #168]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800080a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800080e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<10);
 8000810:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a27      	ldr	r2, [pc, #156]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800081a:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=  (1U<<8);
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	4a24      	ldr	r2, [pc, #144]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000826:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000832:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000836:	6a1b      	ldr	r3, [r3, #32]
 8000838:	4a1e      	ldr	r2, [pc, #120]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800083a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800083e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000842:	6a1b      	ldr	r3, [r3, #32]
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800084a:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=  (1U<<12);
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000852:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000856:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<13);
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800085a:	6a1b      	ldr	r3, [r3, #32]
 800085c:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800085e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000862:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<14);
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<15);
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <uart2_rxtx_init+0xd8>)
 8000876:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800087a:	6213      	str	r3, [r2, #32]

	/*********Configure UART module********/
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= UART2EN;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <uart2_rxtx_init+0xd4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <uart2_rxtx_init+0xd4>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure Baud Rate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000888:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800088c:	490a      	ldr	r1, [pc, #40]	@ (80008b8 <uart2_rxtx_init+0xdc>)
 800088e:	480b      	ldr	r0, [pc, #44]	@ (80008bc <uart2_rxtx_init+0xe0>)
 8000890:	f000 f84a 	bl	8000928 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE | USART_CR1_RXNEIE);
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <uart2_rxtx_init+0xe0>)
 8000896:	222c      	movs	r2, #44	@ 0x2c
 8000898:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <uart2_rxtx_init+0xe0>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <uart2_rxtx_init+0xe0>)
 80008a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008a4:	60d3      	str	r3, [r2, #12]

	/*Enable NVIC for USART2*/
	NVIC_EnableIRQ(USART2_IRQn);
 80008a6:	2026      	movs	r0, #38	@ 0x26
 80008a8:	f7ff ff7a 	bl	80007a0 <__NVIC_EnableIRQ>

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	00f42400 	.word	0x00f42400
 80008bc:	40004400 	.word	0x40004400

080008c0 <uart2_read>:

char uart2_read(void) {
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
    // Wait until the receive data register is not empty
    while (!(USART2->SR & USART_SR_RXNE));
 80008c4:	bf00      	nop
 80008c6:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <uart2_read+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f9      	beq.n	80008c6 <uart2_read+0x6>
    return (char)(USART2->DR); // Return received character
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <uart2_read+0x24>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	b2db      	uxtb	r3, r3
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40004400 	.word	0x40004400

080008e8 <uart2_write>:



void uart2_write(char *data)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
    while (*data) {
 80008f0:	e00c      	b.n	800090c <uart2_write+0x24>
        // Wait until the transmit data register is empty
        while (!(USART2->SR & USART_SR_TXE));
 80008f2:	bf00      	nop
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <uart2_write+0x3c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f9      	beq.n	80008f4 <uart2_write+0xc>
        USART2->DR = *data++; // Send character and increment pointer
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <uart2_write+0x3c>)
 800090a:	605a      	str	r2, [r3, #4]
    while (*data) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1ee      	bne.n	80008f2 <uart2_write+0xa>
    }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40004400 	.word	0x40004400

08000928 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	68b8      	ldr	r0, [r7, #8]
 8000938:	f000 f808 	bl	800094c <compute_uart_bd>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	609a      	str	r2, [r3, #8]
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	085a      	lsrs	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	441a      	add	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	fbb2 f3f3 	udiv	r3, r2, r3
 8000964:	b29b      	uxth	r3, r3
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000974:	480d      	ldr	r0, [pc, #52]	@ (80009ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000976:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000978:	f7ff fefc 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	@ (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	@ (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a2:	f000 fa6f 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fcbd 	bl	8000324 <main>

080009aa <LoopForever>:

LoopForever:
  b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   r0, =_estack
 80009ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009b8:	080021b8 	.word	0x080021b8
  ldr r2, =_sbss
 80009bc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009c0:	200001d8 	.word	0x200001d8

080009c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>

080009c6 <atoi>:
 80009c6:	220a      	movs	r2, #10
 80009c8:	2100      	movs	r1, #0
 80009ca:	f000 b87b 	b.w	8000ac4 <strtol>
	...

080009d0 <_strtol_l.constprop.0>:
 80009d0:	2b24      	cmp	r3, #36	@ 0x24
 80009d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d6:	4686      	mov	lr, r0
 80009d8:	4690      	mov	r8, r2
 80009da:	d801      	bhi.n	80009e0 <_strtol_l.constprop.0+0x10>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d106      	bne.n	80009ee <_strtol_l.constprop.0+0x1e>
 80009e0:	f000 fa4a 	bl	8000e78 <__errno>
 80009e4:	2316      	movs	r3, #22
 80009e6:	6003      	str	r3, [r0, #0]
 80009e8:	2000      	movs	r0, #0
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	4834      	ldr	r0, [pc, #208]	@ (8000ac0 <_strtol_l.constprop.0+0xf0>)
 80009f0:	460d      	mov	r5, r1
 80009f2:	462a      	mov	r2, r5
 80009f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80009f8:	5d06      	ldrb	r6, [r0, r4]
 80009fa:	f016 0608 	ands.w	r6, r6, #8
 80009fe:	d1f8      	bne.n	80009f2 <_strtol_l.constprop.0+0x22>
 8000a00:	2c2d      	cmp	r4, #45	@ 0x2d
 8000a02:	d12d      	bne.n	8000a60 <_strtol_l.constprop.0+0x90>
 8000a04:	782c      	ldrb	r4, [r5, #0]
 8000a06:	2601      	movs	r6, #1
 8000a08:	1c95      	adds	r5, r2, #2
 8000a0a:	f033 0210 	bics.w	r2, r3, #16
 8000a0e:	d109      	bne.n	8000a24 <_strtol_l.constprop.0+0x54>
 8000a10:	2c30      	cmp	r4, #48	@ 0x30
 8000a12:	d12a      	bne.n	8000a6a <_strtol_l.constprop.0+0x9a>
 8000a14:	782a      	ldrb	r2, [r5, #0]
 8000a16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000a1a:	2a58      	cmp	r2, #88	@ 0x58
 8000a1c:	d125      	bne.n	8000a6a <_strtol_l.constprop.0+0x9a>
 8000a1e:	786c      	ldrb	r4, [r5, #1]
 8000a20:	2310      	movs	r3, #16
 8000a22:	3502      	adds	r5, #2
 8000a24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000a28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	fbbc f9f3 	udiv	r9, ip, r3
 8000a32:	4610      	mov	r0, r2
 8000a34:	fb03 ca19 	mls	sl, r3, r9, ip
 8000a38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000a3c:	2f09      	cmp	r7, #9
 8000a3e:	d81b      	bhi.n	8000a78 <_strtol_l.constprop.0+0xa8>
 8000a40:	463c      	mov	r4, r7
 8000a42:	42a3      	cmp	r3, r4
 8000a44:	dd27      	ble.n	8000a96 <_strtol_l.constprop.0+0xc6>
 8000a46:	1c57      	adds	r7, r2, #1
 8000a48:	d007      	beq.n	8000a5a <_strtol_l.constprop.0+0x8a>
 8000a4a:	4581      	cmp	r9, r0
 8000a4c:	d320      	bcc.n	8000a90 <_strtol_l.constprop.0+0xc0>
 8000a4e:	d101      	bne.n	8000a54 <_strtol_l.constprop.0+0x84>
 8000a50:	45a2      	cmp	sl, r4
 8000a52:	db1d      	blt.n	8000a90 <_strtol_l.constprop.0+0xc0>
 8000a54:	fb00 4003 	mla	r0, r0, r3, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000a5e:	e7eb      	b.n	8000a38 <_strtol_l.constprop.0+0x68>
 8000a60:	2c2b      	cmp	r4, #43	@ 0x2b
 8000a62:	bf04      	itt	eq
 8000a64:	782c      	ldrbeq	r4, [r5, #0]
 8000a66:	1c95      	addeq	r5, r2, #2
 8000a68:	e7cf      	b.n	8000a0a <_strtol_l.constprop.0+0x3a>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1da      	bne.n	8000a24 <_strtol_l.constprop.0+0x54>
 8000a6e:	2c30      	cmp	r4, #48	@ 0x30
 8000a70:	bf0c      	ite	eq
 8000a72:	2308      	moveq	r3, #8
 8000a74:	230a      	movne	r3, #10
 8000a76:	e7d5      	b.n	8000a24 <_strtol_l.constprop.0+0x54>
 8000a78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000a7c:	2f19      	cmp	r7, #25
 8000a7e:	d801      	bhi.n	8000a84 <_strtol_l.constprop.0+0xb4>
 8000a80:	3c37      	subs	r4, #55	@ 0x37
 8000a82:	e7de      	b.n	8000a42 <_strtol_l.constprop.0+0x72>
 8000a84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000a88:	2f19      	cmp	r7, #25
 8000a8a:	d804      	bhi.n	8000a96 <_strtol_l.constprop.0+0xc6>
 8000a8c:	3c57      	subs	r4, #87	@ 0x57
 8000a8e:	e7d8      	b.n	8000a42 <_strtol_l.constprop.0+0x72>
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	e7e1      	b.n	8000a5a <_strtol_l.constprop.0+0x8a>
 8000a96:	1c53      	adds	r3, r2, #1
 8000a98:	d108      	bne.n	8000aac <_strtol_l.constprop.0+0xdc>
 8000a9a:	2322      	movs	r3, #34	@ 0x22
 8000a9c:	f8ce 3000 	str.w	r3, [lr]
 8000aa0:	4660      	mov	r0, ip
 8000aa2:	f1b8 0f00 	cmp.w	r8, #0
 8000aa6:	d0a0      	beq.n	80009ea <_strtol_l.constprop.0+0x1a>
 8000aa8:	1e69      	subs	r1, r5, #1
 8000aaa:	e006      	b.n	8000aba <_strtol_l.constprop.0+0xea>
 8000aac:	b106      	cbz	r6, 8000ab0 <_strtol_l.constprop.0+0xe0>
 8000aae:	4240      	negs	r0, r0
 8000ab0:	f1b8 0f00 	cmp.w	r8, #0
 8000ab4:	d099      	beq.n	80009ea <_strtol_l.constprop.0+0x1a>
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d1f6      	bne.n	8000aa8 <_strtol_l.constprop.0+0xd8>
 8000aba:	f8c8 1000 	str.w	r1, [r8]
 8000abe:	e794      	b.n	80009ea <_strtol_l.constprop.0+0x1a>
 8000ac0:	08001fc6 	.word	0x08001fc6

08000ac4 <strtol>:
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	4601      	mov	r1, r0
 8000aca:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <strtol+0x10>)
 8000acc:	6800      	ldr	r0, [r0, #0]
 8000ace:	f7ff bf7f 	b.w	80009d0 <_strtol_l.constprop.0>
 8000ad2:	bf00      	nop
 8000ad4:	2000001c 	.word	0x2000001c

08000ad8 <std>:
 8000ad8:	2300      	movs	r3, #0
 8000ada:	b510      	push	{r4, lr}
 8000adc:	4604      	mov	r4, r0
 8000ade:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ae6:	6083      	str	r3, [r0, #8]
 8000ae8:	8181      	strh	r1, [r0, #12]
 8000aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8000aec:	81c2      	strh	r2, [r0, #14]
 8000aee:	6183      	str	r3, [r0, #24]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2208      	movs	r2, #8
 8000af4:	305c      	adds	r0, #92	@ 0x5c
 8000af6:	f000 f914 	bl	8000d22 <memset>
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <std+0x58>)
 8000afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <std+0x5c>)
 8000b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <std+0x60>)
 8000b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <std+0x64>)
 8000b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <std+0x68>)
 8000b0c:	6224      	str	r4, [r4, #32]
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d006      	beq.n	8000b20 <std+0x48>
 8000b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b16:	4294      	cmp	r4, r2
 8000b18:	d002      	beq.n	8000b20 <std+0x48>
 8000b1a:	33d0      	adds	r3, #208	@ 0xd0
 8000b1c:	429c      	cmp	r4, r3
 8000b1e:	d105      	bne.n	8000b2c <std+0x54>
 8000b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b28:	f000 b9d0 	b.w	8000ecc <__retarget_lock_init_recursive>
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	bf00      	nop
 8000b30:	08000c9d 	.word	0x08000c9d
 8000b34:	08000cbf 	.word	0x08000cbf
 8000b38:	08000cf7 	.word	0x08000cf7
 8000b3c:	08000d1b 	.word	0x08000d1b
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <stdio_exit_handler>:
 8000b44:	4a02      	ldr	r2, [pc, #8]	@ (8000b50 <stdio_exit_handler+0xc>)
 8000b46:	4903      	ldr	r1, [pc, #12]	@ (8000b54 <stdio_exit_handler+0x10>)
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <stdio_exit_handler+0x14>)
 8000b4a:	f000 b869 	b.w	8000c20 <_fwalk_sglue>
 8000b4e:	bf00      	nop
 8000b50:	20000010 	.word	0x20000010
 8000b54:	080017e5 	.word	0x080017e5
 8000b58:	20000020 	.word	0x20000020

08000b5c <cleanup_stdio>:
 8000b5c:	6841      	ldr	r1, [r0, #4]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <cleanup_stdio+0x34>)
 8000b60:	4299      	cmp	r1, r3
 8000b62:	b510      	push	{r4, lr}
 8000b64:	4604      	mov	r4, r0
 8000b66:	d001      	beq.n	8000b6c <cleanup_stdio+0x10>
 8000b68:	f000 fe3c 	bl	80017e4 <_fflush_r>
 8000b6c:	68a1      	ldr	r1, [r4, #8]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <cleanup_stdio+0x38>)
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d002      	beq.n	8000b7a <cleanup_stdio+0x1e>
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 fe35 	bl	80017e4 <_fflush_r>
 8000b7a:	68e1      	ldr	r1, [r4, #12]
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <cleanup_stdio+0x3c>)
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d004      	beq.n	8000b8c <cleanup_stdio+0x30>
 8000b82:	4620      	mov	r0, r4
 8000b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b88:	f000 be2c 	b.w	80017e4 <_fflush_r>
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	200000f4 	.word	0x200000f4
 8000b98:	2000015c 	.word	0x2000015c

08000b9c <global_stdio_init.part.0>:
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <global_stdio_init.part.0+0x30>)
 8000ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8000bd0 <global_stdio_init.part.0+0x34>)
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <global_stdio_init.part.0+0x38>)
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2104      	movs	r1, #4
 8000bac:	f7ff ff94 	bl	8000ad8 <std>
 8000bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2109      	movs	r1, #9
 8000bb8:	f7ff ff8e 	bl	8000ad8 <std>
 8000bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc6:	2112      	movs	r1, #18
 8000bc8:	f7ff bf86 	b.w	8000ad8 <std>
 8000bcc:	200001c4 	.word	0x200001c4
 8000bd0:	2000008c 	.word	0x2000008c
 8000bd4:	08000b45 	.word	0x08000b45

08000bd8 <__sfp_lock_acquire>:
 8000bd8:	4801      	ldr	r0, [pc, #4]	@ (8000be0 <__sfp_lock_acquire+0x8>)
 8000bda:	f000 b978 	b.w	8000ece <__retarget_lock_acquire_recursive>
 8000bde:	bf00      	nop
 8000be0:	200001cd 	.word	0x200001cd

08000be4 <__sfp_lock_release>:
 8000be4:	4801      	ldr	r0, [pc, #4]	@ (8000bec <__sfp_lock_release+0x8>)
 8000be6:	f000 b973 	b.w	8000ed0 <__retarget_lock_release_recursive>
 8000bea:	bf00      	nop
 8000bec:	200001cd 	.word	0x200001cd

08000bf0 <__sinit>:
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	f7ff fff0 	bl	8000bd8 <__sfp_lock_acquire>
 8000bf8:	6a23      	ldr	r3, [r4, #32]
 8000bfa:	b11b      	cbz	r3, 8000c04 <__sinit+0x14>
 8000bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c00:	f7ff bff0 	b.w	8000be4 <__sfp_lock_release>
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__sinit+0x28>)
 8000c06:	6223      	str	r3, [r4, #32]
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__sinit+0x2c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f5      	bne.n	8000bfc <__sinit+0xc>
 8000c10:	f7ff ffc4 	bl	8000b9c <global_stdio_init.part.0>
 8000c14:	e7f2      	b.n	8000bfc <__sinit+0xc>
 8000c16:	bf00      	nop
 8000c18:	08000b5d 	.word	0x08000b5d
 8000c1c:	200001c4 	.word	0x200001c4

08000c20 <_fwalk_sglue>:
 8000c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c24:	4607      	mov	r7, r0
 8000c26:	4688      	mov	r8, r1
 8000c28:	4614      	mov	r4, r2
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c30:	f1b9 0901 	subs.w	r9, r9, #1
 8000c34:	d505      	bpl.n	8000c42 <_fwalk_sglue+0x22>
 8000c36:	6824      	ldr	r4, [r4, #0]
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d1f7      	bne.n	8000c2c <_fwalk_sglue+0xc>
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c42:	89ab      	ldrh	r3, [r5, #12]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d907      	bls.n	8000c58 <_fwalk_sglue+0x38>
 8000c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	d003      	beq.n	8000c58 <_fwalk_sglue+0x38>
 8000c50:	4629      	mov	r1, r5
 8000c52:	4638      	mov	r0, r7
 8000c54:	47c0      	blx	r8
 8000c56:	4306      	orrs	r6, r0
 8000c58:	3568      	adds	r5, #104	@ 0x68
 8000c5a:	e7e9      	b.n	8000c30 <_fwalk_sglue+0x10>

08000c5c <siprintf>:
 8000c5c:	b40e      	push	{r1, r2, r3}
 8000c5e:	b500      	push	{lr}
 8000c60:	b09c      	sub	sp, #112	@ 0x70
 8000c62:	ab1d      	add	r3, sp, #116	@ 0x74
 8000c64:	9002      	str	r0, [sp, #8]
 8000c66:	9006      	str	r0, [sp, #24]
 8000c68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <siprintf+0x38>)
 8000c6e:	9107      	str	r1, [sp, #28]
 8000c70:	9104      	str	r1, [sp, #16]
 8000c72:	4909      	ldr	r1, [pc, #36]	@ (8000c98 <siprintf+0x3c>)
 8000c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c78:	9105      	str	r1, [sp, #20]
 8000c7a:	6800      	ldr	r0, [r0, #0]
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	a902      	add	r1, sp, #8
 8000c80:	f000 faa2 	bl	80011c8 <_svfiprintf_r>
 8000c84:	9b02      	ldr	r3, [sp, #8]
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	b01c      	add	sp, #112	@ 0x70
 8000c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c90:	b003      	add	sp, #12
 8000c92:	4770      	bx	lr
 8000c94:	2000001c 	.word	0x2000001c
 8000c98:	ffff0208 	.word	0xffff0208

08000c9c <__sread>:
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ca4:	f000 f8c4 	bl	8000e30 <_read_r>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	bfab      	itete	ge
 8000cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000cae:	89a3      	ldrhlt	r3, [r4, #12]
 8000cb0:	181b      	addge	r3, r3, r0
 8000cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000cb6:	bfac      	ite	ge
 8000cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000cba:	81a3      	strhlt	r3, [r4, #12]
 8000cbc:	bd10      	pop	{r4, pc}

08000cbe <__swrite>:
 8000cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc2:	461f      	mov	r7, r3
 8000cc4:	898b      	ldrh	r3, [r1, #12]
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	4605      	mov	r5, r0
 8000cca:	460c      	mov	r4, r1
 8000ccc:	4616      	mov	r6, r2
 8000cce:	d505      	bpl.n	8000cdc <__swrite+0x1e>
 8000cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f000 f898 	bl	8000e0c <_lseek_r>
 8000cdc:	89a3      	ldrh	r3, [r4, #12]
 8000cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ce6:	81a3      	strh	r3, [r4, #12]
 8000ce8:	4632      	mov	r2, r6
 8000cea:	463b      	mov	r3, r7
 8000cec:	4628      	mov	r0, r5
 8000cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf2:	f000 b8af 	b.w	8000e54 <_write_r>

08000cf6 <__sseek>:
 8000cf6:	b510      	push	{r4, lr}
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cfe:	f000 f885 	bl	8000e0c <_lseek_r>
 8000d02:	1c43      	adds	r3, r0, #1
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	bf15      	itete	ne
 8000d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d12:	81a3      	strheq	r3, [r4, #12]
 8000d14:	bf18      	it	ne
 8000d16:	81a3      	strhne	r3, [r4, #12]
 8000d18:	bd10      	pop	{r4, pc}

08000d1a <__sclose>:
 8000d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d1e:	f000 b865 	b.w	8000dec <_close_r>

08000d22 <memset>:
 8000d22:	4402      	add	r2, r0
 8000d24:	4603      	mov	r3, r0
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d100      	bne.n	8000d2c <memset+0xa>
 8000d2a:	4770      	bx	lr
 8000d2c:	f803 1b01 	strb.w	r1, [r3], #1
 8000d30:	e7f9      	b.n	8000d26 <memset+0x4>
	...

08000d34 <strtok>:
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <strtok+0x5c>)
 8000d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3a:	681f      	ldr	r7, [r3, #0]
 8000d3c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8000d3e:	4605      	mov	r5, r0
 8000d40:	460e      	mov	r6, r1
 8000d42:	b9ec      	cbnz	r4, 8000d80 <strtok+0x4c>
 8000d44:	2050      	movs	r0, #80	@ 0x50
 8000d46:	f000 f92d 	bl	8000fa4 <malloc>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	6478      	str	r0, [r7, #68]	@ 0x44
 8000d4e:	b920      	cbnz	r0, 8000d5a <strtok+0x26>
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <strtok+0x60>)
 8000d52:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <strtok+0x64>)
 8000d54:	215b      	movs	r1, #91	@ 0x5b
 8000d56:	f000 f8bd 	bl	8000ed4 <__assert_func>
 8000d5a:	e9c0 4400 	strd	r4, r4, [r0]
 8000d5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000d62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000d66:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8000d6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8000d6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8000d72:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8000d76:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8000d7a:	6184      	str	r4, [r0, #24]
 8000d7c:	7704      	strb	r4, [r0, #28]
 8000d7e:	6244      	str	r4, [r0, #36]	@ 0x24
 8000d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d82:	4631      	mov	r1, r6
 8000d84:	4628      	mov	r0, r5
 8000d86:	2301      	movs	r3, #1
 8000d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8c:	f000 b806 	b.w	8000d9c <__strtok_r>
 8000d90:	2000001c 	.word	0x2000001c
 8000d94:	080020c6 	.word	0x080020c6
 8000d98:	080020dd 	.word	0x080020dd

08000d9c <__strtok_r>:
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	4604      	mov	r4, r0
 8000da0:	b908      	cbnz	r0, 8000da6 <__strtok_r+0xa>
 8000da2:	6814      	ldr	r4, [r2, #0]
 8000da4:	b144      	cbz	r4, 8000db8 <__strtok_r+0x1c>
 8000da6:	4620      	mov	r0, r4
 8000da8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000dac:	460f      	mov	r7, r1
 8000dae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000db2:	b91e      	cbnz	r6, 8000dbc <__strtok_r+0x20>
 8000db4:	b965      	cbnz	r5, 8000dd0 <__strtok_r+0x34>
 8000db6:	6015      	str	r5, [r2, #0]
 8000db8:	2000      	movs	r0, #0
 8000dba:	e005      	b.n	8000dc8 <__strtok_r+0x2c>
 8000dbc:	42b5      	cmp	r5, r6
 8000dbe:	d1f6      	bne.n	8000dae <__strtok_r+0x12>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f0      	bne.n	8000da6 <__strtok_r+0xa>
 8000dc4:	6014      	str	r4, [r2, #0]
 8000dc6:	7003      	strb	r3, [r0, #0]
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dca:	461c      	mov	r4, r3
 8000dcc:	e00c      	b.n	8000de8 <__strtok_r+0x4c>
 8000dce:	b915      	cbnz	r5, 8000dd6 <__strtok_r+0x3a>
 8000dd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000dd4:	460e      	mov	r6, r1
 8000dd6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000dda:	42ab      	cmp	r3, r5
 8000ddc:	d1f7      	bne.n	8000dce <__strtok_r+0x32>
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f3      	beq.n	8000dca <__strtok_r+0x2e>
 8000de2:	2300      	movs	r3, #0
 8000de4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000de8:	6014      	str	r4, [r2, #0]
 8000dea:	e7ed      	b.n	8000dc8 <__strtok_r+0x2c>

08000dec <_close_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4d06      	ldr	r5, [pc, #24]	@ (8000e08 <_close_r+0x1c>)
 8000df0:	2300      	movs	r3, #0
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	602b      	str	r3, [r5, #0]
 8000df8:	f7ff fc51 	bl	800069e <_close>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d102      	bne.n	8000e06 <_close_r+0x1a>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	b103      	cbz	r3, 8000e06 <_close_r+0x1a>
 8000e04:	6023      	str	r3, [r4, #0]
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	200001c8 	.word	0x200001c8

08000e0c <_lseek_r>:
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4d07      	ldr	r5, [pc, #28]	@ (8000e2c <_lseek_r+0x20>)
 8000e10:	4604      	mov	r4, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	602a      	str	r2, [r5, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f7ff fc66 	bl	80006ec <_lseek>
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	d102      	bne.n	8000e2a <_lseek_r+0x1e>
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	b103      	cbz	r3, 8000e2a <_lseek_r+0x1e>
 8000e28:	6023      	str	r3, [r4, #0]
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	200001c8 	.word	0x200001c8

08000e30 <_read_r>:
 8000e30:	b538      	push	{r3, r4, r5, lr}
 8000e32:	4d07      	ldr	r5, [pc, #28]	@ (8000e50 <_read_r+0x20>)
 8000e34:	4604      	mov	r4, r0
 8000e36:	4608      	mov	r0, r1
 8000e38:	4611      	mov	r1, r2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	602a      	str	r2, [r5, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f7ff fbf4 	bl	800062c <_read>
 8000e44:	1c43      	adds	r3, r0, #1
 8000e46:	d102      	bne.n	8000e4e <_read_r+0x1e>
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	b103      	cbz	r3, 8000e4e <_read_r+0x1e>
 8000e4c:	6023      	str	r3, [r4, #0]
 8000e4e:	bd38      	pop	{r3, r4, r5, pc}
 8000e50:	200001c8 	.word	0x200001c8

08000e54 <_write_r>:
 8000e54:	b538      	push	{r3, r4, r5, lr}
 8000e56:	4d07      	ldr	r5, [pc, #28]	@ (8000e74 <_write_r+0x20>)
 8000e58:	4604      	mov	r4, r0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	2200      	movs	r2, #0
 8000e60:	602a      	str	r2, [r5, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	f7ff fbff 	bl	8000666 <_write>
 8000e68:	1c43      	adds	r3, r0, #1
 8000e6a:	d102      	bne.n	8000e72 <_write_r+0x1e>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	b103      	cbz	r3, 8000e72 <_write_r+0x1e>
 8000e70:	6023      	str	r3, [r4, #0]
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
 8000e74:	200001c8 	.word	0x200001c8

08000e78 <__errno>:
 8000e78:	4b01      	ldr	r3, [pc, #4]	@ (8000e80 <__errno+0x8>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000001c 	.word	0x2000001c

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	4d0d      	ldr	r5, [pc, #52]	@ (8000ebc <__libc_init_array+0x38>)
 8000e88:	4c0d      	ldr	r4, [pc, #52]	@ (8000ec0 <__libc_init_array+0x3c>)
 8000e8a:	1b64      	subs	r4, r4, r5
 8000e8c:	10a4      	asrs	r4, r4, #2
 8000e8e:	2600      	movs	r6, #0
 8000e90:	42a6      	cmp	r6, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	4d0b      	ldr	r5, [pc, #44]	@ (8000ec4 <__libc_init_array+0x40>)
 8000e96:	4c0c      	ldr	r4, [pc, #48]	@ (8000ec8 <__libc_init_array+0x44>)
 8000e98:	f000 fff0 	bl	8001e7c <_init>
 8000e9c:	1b64      	subs	r4, r4, r5
 8000e9e:	10a4      	asrs	r4, r4, #2
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	42a6      	cmp	r6, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eac:	4798      	blx	r3
 8000eae:	3601      	adds	r6, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb6:	4798      	blx	r3
 8000eb8:	3601      	adds	r6, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	080021b0 	.word	0x080021b0
 8000ec0:	080021b0 	.word	0x080021b0
 8000ec4:	080021b0 	.word	0x080021b0
 8000ec8:	080021b4 	.word	0x080021b4

08000ecc <__retarget_lock_init_recursive>:
 8000ecc:	4770      	bx	lr

08000ece <__retarget_lock_acquire_recursive>:
 8000ece:	4770      	bx	lr

08000ed0 <__retarget_lock_release_recursive>:
 8000ed0:	4770      	bx	lr
	...

08000ed4 <__assert_func>:
 8000ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ed6:	4614      	mov	r4, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <__assert_func+0x2c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4605      	mov	r5, r0
 8000ee0:	68d8      	ldr	r0, [r3, #12]
 8000ee2:	b954      	cbnz	r4, 8000efa <__assert_func+0x26>
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <__assert_func+0x30>)
 8000ee6:	461c      	mov	r4, r3
 8000ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000eec:	9100      	str	r1, [sp, #0]
 8000eee:	462b      	mov	r3, r5
 8000ef0:	4905      	ldr	r1, [pc, #20]	@ (8000f08 <__assert_func+0x34>)
 8000ef2:	f000 fc9f 	bl	8001834 <fiprintf>
 8000ef6:	f000 fce7 	bl	80018c8 <abort>
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__assert_func+0x38>)
 8000efc:	e7f4      	b.n	8000ee8 <__assert_func+0x14>
 8000efe:	bf00      	nop
 8000f00:	2000001c 	.word	0x2000001c
 8000f04:	08002172 	.word	0x08002172
 8000f08:	08002144 	.word	0x08002144
 8000f0c:	08002137 	.word	0x08002137

08000f10 <_free_r>:
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4605      	mov	r5, r0
 8000f14:	2900      	cmp	r1, #0
 8000f16:	d041      	beq.n	8000f9c <_free_r+0x8c>
 8000f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f1c:	1f0c      	subs	r4, r1, #4
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bfb8      	it	lt
 8000f22:	18e4      	addlt	r4, r4, r3
 8000f24:	f000 f8e8 	bl	80010f8 <__malloc_lock>
 8000f28:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa0 <_free_r+0x90>)
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	b933      	cbnz	r3, 8000f3c <_free_r+0x2c>
 8000f2e:	6063      	str	r3, [r4, #4]
 8000f30:	6014      	str	r4, [r2, #0]
 8000f32:	4628      	mov	r0, r5
 8000f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f38:	f000 b8e4 	b.w	8001104 <__malloc_unlock>
 8000f3c:	42a3      	cmp	r3, r4
 8000f3e:	d908      	bls.n	8000f52 <_free_r+0x42>
 8000f40:	6820      	ldr	r0, [r4, #0]
 8000f42:	1821      	adds	r1, r4, r0
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf01      	itttt	eq
 8000f48:	6819      	ldreq	r1, [r3, #0]
 8000f4a:	685b      	ldreq	r3, [r3, #4]
 8000f4c:	1809      	addeq	r1, r1, r0
 8000f4e:	6021      	streq	r1, [r4, #0]
 8000f50:	e7ed      	b.n	8000f2e <_free_r+0x1e>
 8000f52:	461a      	mov	r2, r3
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b10b      	cbz	r3, 8000f5c <_free_r+0x4c>
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d9fa      	bls.n	8000f52 <_free_r+0x42>
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	1850      	adds	r0, r2, r1
 8000f60:	42a0      	cmp	r0, r4
 8000f62:	d10b      	bne.n	8000f7c <_free_r+0x6c>
 8000f64:	6820      	ldr	r0, [r4, #0]
 8000f66:	4401      	add	r1, r0
 8000f68:	1850      	adds	r0, r2, r1
 8000f6a:	4283      	cmp	r3, r0
 8000f6c:	6011      	str	r1, [r2, #0]
 8000f6e:	d1e0      	bne.n	8000f32 <_free_r+0x22>
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	6053      	str	r3, [r2, #4]
 8000f76:	4408      	add	r0, r1
 8000f78:	6010      	str	r0, [r2, #0]
 8000f7a:	e7da      	b.n	8000f32 <_free_r+0x22>
 8000f7c:	d902      	bls.n	8000f84 <_free_r+0x74>
 8000f7e:	230c      	movs	r3, #12
 8000f80:	602b      	str	r3, [r5, #0]
 8000f82:	e7d6      	b.n	8000f32 <_free_r+0x22>
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	1821      	adds	r1, r4, r0
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf04      	itt	eq
 8000f8c:	6819      	ldreq	r1, [r3, #0]
 8000f8e:	685b      	ldreq	r3, [r3, #4]
 8000f90:	6063      	str	r3, [r4, #4]
 8000f92:	bf04      	itt	eq
 8000f94:	1809      	addeq	r1, r1, r0
 8000f96:	6021      	streq	r1, [r4, #0]
 8000f98:	6054      	str	r4, [r2, #4]
 8000f9a:	e7ca      	b.n	8000f32 <_free_r+0x22>
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001d4 	.word	0x200001d4

08000fa4 <malloc>:
 8000fa4:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <malloc+0xc>)
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f000 b825 	b.w	8000ff8 <_malloc_r>
 8000fae:	bf00      	nop
 8000fb0:	2000001c 	.word	0x2000001c

08000fb4 <sbrk_aligned>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8000ff4 <sbrk_aligned+0x40>)
 8000fb8:	460c      	mov	r4, r1
 8000fba:	6831      	ldr	r1, [r6, #0]
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	b911      	cbnz	r1, 8000fc6 <sbrk_aligned+0x12>
 8000fc0:	f000 fc64 	bl	800188c <_sbrk_r>
 8000fc4:	6030      	str	r0, [r6, #0]
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f000 fc5f 	bl	800188c <_sbrk_r>
 8000fce:	1c43      	adds	r3, r0, #1
 8000fd0:	d103      	bne.n	8000fda <sbrk_aligned+0x26>
 8000fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}
 8000fda:	1cc4      	adds	r4, r0, #3
 8000fdc:	f024 0403 	bic.w	r4, r4, #3
 8000fe0:	42a0      	cmp	r0, r4
 8000fe2:	d0f8      	beq.n	8000fd6 <sbrk_aligned+0x22>
 8000fe4:	1a21      	subs	r1, r4, r0
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f000 fc50 	bl	800188c <_sbrk_r>
 8000fec:	3001      	adds	r0, #1
 8000fee:	d1f2      	bne.n	8000fd6 <sbrk_aligned+0x22>
 8000ff0:	e7ef      	b.n	8000fd2 <sbrk_aligned+0x1e>
 8000ff2:	bf00      	nop
 8000ff4:	200001d0 	.word	0x200001d0

08000ff8 <_malloc_r>:
 8000ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ffc:	1ccd      	adds	r5, r1, #3
 8000ffe:	f025 0503 	bic.w	r5, r5, #3
 8001002:	3508      	adds	r5, #8
 8001004:	2d0c      	cmp	r5, #12
 8001006:	bf38      	it	cc
 8001008:	250c      	movcc	r5, #12
 800100a:	2d00      	cmp	r5, #0
 800100c:	4606      	mov	r6, r0
 800100e:	db01      	blt.n	8001014 <_malloc_r+0x1c>
 8001010:	42a9      	cmp	r1, r5
 8001012:	d904      	bls.n	800101e <_malloc_r+0x26>
 8001014:	230c      	movs	r3, #12
 8001016:	6033      	str	r3, [r6, #0]
 8001018:	2000      	movs	r0, #0
 800101a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800101e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80010f4 <_malloc_r+0xfc>
 8001022:	f000 f869 	bl	80010f8 <__malloc_lock>
 8001026:	f8d8 3000 	ldr.w	r3, [r8]
 800102a:	461c      	mov	r4, r3
 800102c:	bb44      	cbnz	r4, 8001080 <_malloc_r+0x88>
 800102e:	4629      	mov	r1, r5
 8001030:	4630      	mov	r0, r6
 8001032:	f7ff ffbf 	bl	8000fb4 <sbrk_aligned>
 8001036:	1c43      	adds	r3, r0, #1
 8001038:	4604      	mov	r4, r0
 800103a:	d158      	bne.n	80010ee <_malloc_r+0xf6>
 800103c:	f8d8 4000 	ldr.w	r4, [r8]
 8001040:	4627      	mov	r7, r4
 8001042:	2f00      	cmp	r7, #0
 8001044:	d143      	bne.n	80010ce <_malloc_r+0xd6>
 8001046:	2c00      	cmp	r4, #0
 8001048:	d04b      	beq.n	80010e2 <_malloc_r+0xea>
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	4639      	mov	r1, r7
 800104e:	4630      	mov	r0, r6
 8001050:	eb04 0903 	add.w	r9, r4, r3
 8001054:	f000 fc1a 	bl	800188c <_sbrk_r>
 8001058:	4581      	cmp	r9, r0
 800105a:	d142      	bne.n	80010e2 <_malloc_r+0xea>
 800105c:	6821      	ldr	r1, [r4, #0]
 800105e:	1a6d      	subs	r5, r5, r1
 8001060:	4629      	mov	r1, r5
 8001062:	4630      	mov	r0, r6
 8001064:	f7ff ffa6 	bl	8000fb4 <sbrk_aligned>
 8001068:	3001      	adds	r0, #1
 800106a:	d03a      	beq.n	80010e2 <_malloc_r+0xea>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	442b      	add	r3, r5
 8001070:	6023      	str	r3, [r4, #0]
 8001072:	f8d8 3000 	ldr.w	r3, [r8]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	bb62      	cbnz	r2, 80010d4 <_malloc_r+0xdc>
 800107a:	f8c8 7000 	str.w	r7, [r8]
 800107e:	e00f      	b.n	80010a0 <_malloc_r+0xa8>
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	1b52      	subs	r2, r2, r5
 8001084:	d420      	bmi.n	80010c8 <_malloc_r+0xd0>
 8001086:	2a0b      	cmp	r2, #11
 8001088:	d917      	bls.n	80010ba <_malloc_r+0xc2>
 800108a:	1961      	adds	r1, r4, r5
 800108c:	42a3      	cmp	r3, r4
 800108e:	6025      	str	r5, [r4, #0]
 8001090:	bf18      	it	ne
 8001092:	6059      	strne	r1, [r3, #4]
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	bf08      	it	eq
 8001098:	f8c8 1000 	streq.w	r1, [r8]
 800109c:	5162      	str	r2, [r4, r5]
 800109e:	604b      	str	r3, [r1, #4]
 80010a0:	4630      	mov	r0, r6
 80010a2:	f000 f82f 	bl	8001104 <__malloc_unlock>
 80010a6:	f104 000b 	add.w	r0, r4, #11
 80010aa:	1d23      	adds	r3, r4, #4
 80010ac:	f020 0007 	bic.w	r0, r0, #7
 80010b0:	1ac2      	subs	r2, r0, r3
 80010b2:	bf1c      	itt	ne
 80010b4:	1a1b      	subne	r3, r3, r0
 80010b6:	50a3      	strne	r3, [r4, r2]
 80010b8:	e7af      	b.n	800101a <_malloc_r+0x22>
 80010ba:	6862      	ldr	r2, [r4, #4]
 80010bc:	42a3      	cmp	r3, r4
 80010be:	bf0c      	ite	eq
 80010c0:	f8c8 2000 	streq.w	r2, [r8]
 80010c4:	605a      	strne	r2, [r3, #4]
 80010c6:	e7eb      	b.n	80010a0 <_malloc_r+0xa8>
 80010c8:	4623      	mov	r3, r4
 80010ca:	6864      	ldr	r4, [r4, #4]
 80010cc:	e7ae      	b.n	800102c <_malloc_r+0x34>
 80010ce:	463c      	mov	r4, r7
 80010d0:	687f      	ldr	r7, [r7, #4]
 80010d2:	e7b6      	b.n	8001042 <_malloc_r+0x4a>
 80010d4:	461a      	mov	r2, r3
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	42a3      	cmp	r3, r4
 80010da:	d1fb      	bne.n	80010d4 <_malloc_r+0xdc>
 80010dc:	2300      	movs	r3, #0
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	e7de      	b.n	80010a0 <_malloc_r+0xa8>
 80010e2:	230c      	movs	r3, #12
 80010e4:	6033      	str	r3, [r6, #0]
 80010e6:	4630      	mov	r0, r6
 80010e8:	f000 f80c 	bl	8001104 <__malloc_unlock>
 80010ec:	e794      	b.n	8001018 <_malloc_r+0x20>
 80010ee:	6005      	str	r5, [r0, #0]
 80010f0:	e7d6      	b.n	80010a0 <_malloc_r+0xa8>
 80010f2:	bf00      	nop
 80010f4:	200001d4 	.word	0x200001d4

080010f8 <__malloc_lock>:
 80010f8:	4801      	ldr	r0, [pc, #4]	@ (8001100 <__malloc_lock+0x8>)
 80010fa:	f7ff bee8 	b.w	8000ece <__retarget_lock_acquire_recursive>
 80010fe:	bf00      	nop
 8001100:	200001cc 	.word	0x200001cc

08001104 <__malloc_unlock>:
 8001104:	4801      	ldr	r0, [pc, #4]	@ (800110c <__malloc_unlock+0x8>)
 8001106:	f7ff bee3 	b.w	8000ed0 <__retarget_lock_release_recursive>
 800110a:	bf00      	nop
 800110c:	200001cc 	.word	0x200001cc

08001110 <__ssputs_r>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	688e      	ldr	r6, [r1, #8]
 8001116:	461f      	mov	r7, r3
 8001118:	42be      	cmp	r6, r7
 800111a:	680b      	ldr	r3, [r1, #0]
 800111c:	4682      	mov	sl, r0
 800111e:	460c      	mov	r4, r1
 8001120:	4690      	mov	r8, r2
 8001122:	d82d      	bhi.n	8001180 <__ssputs_r+0x70>
 8001124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800112c:	d026      	beq.n	800117c <__ssputs_r+0x6c>
 800112e:	6965      	ldr	r5, [r4, #20]
 8001130:	6909      	ldr	r1, [r1, #16]
 8001132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001136:	eba3 0901 	sub.w	r9, r3, r1
 800113a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800113e:	1c7b      	adds	r3, r7, #1
 8001140:	444b      	add	r3, r9
 8001142:	106d      	asrs	r5, r5, #1
 8001144:	429d      	cmp	r5, r3
 8001146:	bf38      	it	cc
 8001148:	461d      	movcc	r5, r3
 800114a:	0553      	lsls	r3, r2, #21
 800114c:	d527      	bpl.n	800119e <__ssputs_r+0x8e>
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff ff52 	bl	8000ff8 <_malloc_r>
 8001154:	4606      	mov	r6, r0
 8001156:	b360      	cbz	r0, 80011b2 <__ssputs_r+0xa2>
 8001158:	6921      	ldr	r1, [r4, #16]
 800115a:	464a      	mov	r2, r9
 800115c:	f000 fba6 	bl	80018ac <memcpy>
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116a:	81a3      	strh	r3, [r4, #12]
 800116c:	6126      	str	r6, [r4, #16]
 800116e:	6165      	str	r5, [r4, #20]
 8001170:	444e      	add	r6, r9
 8001172:	eba5 0509 	sub.w	r5, r5, r9
 8001176:	6026      	str	r6, [r4, #0]
 8001178:	60a5      	str	r5, [r4, #8]
 800117a:	463e      	mov	r6, r7
 800117c:	42be      	cmp	r6, r7
 800117e:	d900      	bls.n	8001182 <__ssputs_r+0x72>
 8001180:	463e      	mov	r6, r7
 8001182:	6820      	ldr	r0, [r4, #0]
 8001184:	4632      	mov	r2, r6
 8001186:	4641      	mov	r1, r8
 8001188:	f000 fb66 	bl	8001858 <memmove>
 800118c:	68a3      	ldr	r3, [r4, #8]
 800118e:	1b9b      	subs	r3, r3, r6
 8001190:	60a3      	str	r3, [r4, #8]
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	4433      	add	r3, r6
 8001196:	6023      	str	r3, [r4, #0]
 8001198:	2000      	movs	r0, #0
 800119a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119e:	462a      	mov	r2, r5
 80011a0:	f000 fb99 	bl	80018d6 <_realloc_r>
 80011a4:	4606      	mov	r6, r0
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d1e0      	bne.n	800116c <__ssputs_r+0x5c>
 80011aa:	6921      	ldr	r1, [r4, #16]
 80011ac:	4650      	mov	r0, sl
 80011ae:	f7ff feaf 	bl	8000f10 <_free_r>
 80011b2:	230c      	movs	r3, #12
 80011b4:	f8ca 3000 	str.w	r3, [sl]
 80011b8:	89a3      	ldrh	r3, [r4, #12]
 80011ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011be:	81a3      	strh	r3, [r4, #12]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	e7e9      	b.n	800119a <__ssputs_r+0x8a>
	...

080011c8 <_svfiprintf_r>:
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011cc:	4698      	mov	r8, r3
 80011ce:	898b      	ldrh	r3, [r1, #12]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	b09d      	sub	sp, #116	@ 0x74
 80011d4:	4607      	mov	r7, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	4614      	mov	r4, r2
 80011da:	d510      	bpl.n	80011fe <_svfiprintf_r+0x36>
 80011dc:	690b      	ldr	r3, [r1, #16]
 80011de:	b973      	cbnz	r3, 80011fe <_svfiprintf_r+0x36>
 80011e0:	2140      	movs	r1, #64	@ 0x40
 80011e2:	f7ff ff09 	bl	8000ff8 <_malloc_r>
 80011e6:	6028      	str	r0, [r5, #0]
 80011e8:	6128      	str	r0, [r5, #16]
 80011ea:	b930      	cbnz	r0, 80011fa <_svfiprintf_r+0x32>
 80011ec:	230c      	movs	r3, #12
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	b01d      	add	sp, #116	@ 0x74
 80011f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fa:	2340      	movs	r3, #64	@ 0x40
 80011fc:	616b      	str	r3, [r5, #20]
 80011fe:	2300      	movs	r3, #0
 8001200:	9309      	str	r3, [sp, #36]	@ 0x24
 8001202:	2320      	movs	r3, #32
 8001204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001208:	f8cd 800c 	str.w	r8, [sp, #12]
 800120c:	2330      	movs	r3, #48	@ 0x30
 800120e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80013ac <_svfiprintf_r+0x1e4>
 8001212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001216:	f04f 0901 	mov.w	r9, #1
 800121a:	4623      	mov	r3, r4
 800121c:	469a      	mov	sl, r3
 800121e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001222:	b10a      	cbz	r2, 8001228 <_svfiprintf_r+0x60>
 8001224:	2a25      	cmp	r2, #37	@ 0x25
 8001226:	d1f9      	bne.n	800121c <_svfiprintf_r+0x54>
 8001228:	ebba 0b04 	subs.w	fp, sl, r4
 800122c:	d00b      	beq.n	8001246 <_svfiprintf_r+0x7e>
 800122e:	465b      	mov	r3, fp
 8001230:	4622      	mov	r2, r4
 8001232:	4629      	mov	r1, r5
 8001234:	4638      	mov	r0, r7
 8001236:	f7ff ff6b 	bl	8001110 <__ssputs_r>
 800123a:	3001      	adds	r0, #1
 800123c:	f000 80a7 	beq.w	800138e <_svfiprintf_r+0x1c6>
 8001240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001242:	445a      	add	r2, fp
 8001244:	9209      	str	r2, [sp, #36]	@ 0x24
 8001246:	f89a 3000 	ldrb.w	r3, [sl]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 809f 	beq.w	800138e <_svfiprintf_r+0x1c6>
 8001250:	2300      	movs	r3, #0
 8001252:	f04f 32ff 	mov.w	r2, #4294967295
 8001256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800125a:	f10a 0a01 	add.w	sl, sl, #1
 800125e:	9304      	str	r3, [sp, #16]
 8001260:	9307      	str	r3, [sp, #28]
 8001262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001266:	931a      	str	r3, [sp, #104]	@ 0x68
 8001268:	4654      	mov	r4, sl
 800126a:	2205      	movs	r2, #5
 800126c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001270:	484e      	ldr	r0, [pc, #312]	@ (80013ac <_svfiprintf_r+0x1e4>)
 8001272:	f7fe ffc5 	bl	8000200 <memchr>
 8001276:	9a04      	ldr	r2, [sp, #16]
 8001278:	b9d8      	cbnz	r0, 80012b2 <_svfiprintf_r+0xea>
 800127a:	06d0      	lsls	r0, r2, #27
 800127c:	bf44      	itt	mi
 800127e:	2320      	movmi	r3, #32
 8001280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001284:	0711      	lsls	r1, r2, #28
 8001286:	bf44      	itt	mi
 8001288:	232b      	movmi	r3, #43	@ 0x2b
 800128a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800128e:	f89a 3000 	ldrb.w	r3, [sl]
 8001292:	2b2a      	cmp	r3, #42	@ 0x2a
 8001294:	d015      	beq.n	80012c2 <_svfiprintf_r+0xfa>
 8001296:	9a07      	ldr	r2, [sp, #28]
 8001298:	4654      	mov	r4, sl
 800129a:	2000      	movs	r0, #0
 800129c:	f04f 0c0a 	mov.w	ip, #10
 80012a0:	4621      	mov	r1, r4
 80012a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012a6:	3b30      	subs	r3, #48	@ 0x30
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d94b      	bls.n	8001344 <_svfiprintf_r+0x17c>
 80012ac:	b1b0      	cbz	r0, 80012dc <_svfiprintf_r+0x114>
 80012ae:	9207      	str	r2, [sp, #28]
 80012b0:	e014      	b.n	80012dc <_svfiprintf_r+0x114>
 80012b2:	eba0 0308 	sub.w	r3, r0, r8
 80012b6:	fa09 f303 	lsl.w	r3, r9, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	9304      	str	r3, [sp, #16]
 80012be:	46a2      	mov	sl, r4
 80012c0:	e7d2      	b.n	8001268 <_svfiprintf_r+0xa0>
 80012c2:	9b03      	ldr	r3, [sp, #12]
 80012c4:	1d19      	adds	r1, r3, #4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	9103      	str	r1, [sp, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bfbb      	ittet	lt
 80012ce:	425b      	neglt	r3, r3
 80012d0:	f042 0202 	orrlt.w	r2, r2, #2
 80012d4:	9307      	strge	r3, [sp, #28]
 80012d6:	9307      	strlt	r3, [sp, #28]
 80012d8:	bfb8      	it	lt
 80012da:	9204      	strlt	r2, [sp, #16]
 80012dc:	7823      	ldrb	r3, [r4, #0]
 80012de:	2b2e      	cmp	r3, #46	@ 0x2e
 80012e0:	d10a      	bne.n	80012f8 <_svfiprintf_r+0x130>
 80012e2:	7863      	ldrb	r3, [r4, #1]
 80012e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e6:	d132      	bne.n	800134e <_svfiprintf_r+0x186>
 80012e8:	9b03      	ldr	r3, [sp, #12]
 80012ea:	1d1a      	adds	r2, r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	9203      	str	r2, [sp, #12]
 80012f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80012f4:	3402      	adds	r4, #2
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80013bc <_svfiprintf_r+0x1f4>
 80012fc:	7821      	ldrb	r1, [r4, #0]
 80012fe:	2203      	movs	r2, #3
 8001300:	4650      	mov	r0, sl
 8001302:	f7fe ff7d 	bl	8000200 <memchr>
 8001306:	b138      	cbz	r0, 8001318 <_svfiprintf_r+0x150>
 8001308:	9b04      	ldr	r3, [sp, #16]
 800130a:	eba0 000a 	sub.w	r0, r0, sl
 800130e:	2240      	movs	r2, #64	@ 0x40
 8001310:	4082      	lsls	r2, r0
 8001312:	4313      	orrs	r3, r2
 8001314:	3401      	adds	r4, #1
 8001316:	9304      	str	r3, [sp, #16]
 8001318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800131c:	4824      	ldr	r0, [pc, #144]	@ (80013b0 <_svfiprintf_r+0x1e8>)
 800131e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001322:	2206      	movs	r2, #6
 8001324:	f7fe ff6c 	bl	8000200 <memchr>
 8001328:	2800      	cmp	r0, #0
 800132a:	d036      	beq.n	800139a <_svfiprintf_r+0x1d2>
 800132c:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <_svfiprintf_r+0x1ec>)
 800132e:	bb1b      	cbnz	r3, 8001378 <_svfiprintf_r+0x1b0>
 8001330:	9b03      	ldr	r3, [sp, #12]
 8001332:	3307      	adds	r3, #7
 8001334:	f023 0307 	bic.w	r3, r3, #7
 8001338:	3308      	adds	r3, #8
 800133a:	9303      	str	r3, [sp, #12]
 800133c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800133e:	4433      	add	r3, r6
 8001340:	9309      	str	r3, [sp, #36]	@ 0x24
 8001342:	e76a      	b.n	800121a <_svfiprintf_r+0x52>
 8001344:	fb0c 3202 	mla	r2, ip, r2, r3
 8001348:	460c      	mov	r4, r1
 800134a:	2001      	movs	r0, #1
 800134c:	e7a8      	b.n	80012a0 <_svfiprintf_r+0xd8>
 800134e:	2300      	movs	r3, #0
 8001350:	3401      	adds	r4, #1
 8001352:	9305      	str	r3, [sp, #20]
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0c0a 	mov.w	ip, #10
 800135a:	4620      	mov	r0, r4
 800135c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001360:	3a30      	subs	r2, #48	@ 0x30
 8001362:	2a09      	cmp	r2, #9
 8001364:	d903      	bls.n	800136e <_svfiprintf_r+0x1a6>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0c6      	beq.n	80012f8 <_svfiprintf_r+0x130>
 800136a:	9105      	str	r1, [sp, #20]
 800136c:	e7c4      	b.n	80012f8 <_svfiprintf_r+0x130>
 800136e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001372:	4604      	mov	r4, r0
 8001374:	2301      	movs	r3, #1
 8001376:	e7f0      	b.n	800135a <_svfiprintf_r+0x192>
 8001378:	ab03      	add	r3, sp, #12
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	462a      	mov	r2, r5
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <_svfiprintf_r+0x1f0>)
 8001380:	a904      	add	r1, sp, #16
 8001382:	4638      	mov	r0, r7
 8001384:	f3af 8000 	nop.w
 8001388:	1c42      	adds	r2, r0, #1
 800138a:	4606      	mov	r6, r0
 800138c:	d1d6      	bne.n	800133c <_svfiprintf_r+0x174>
 800138e:	89ab      	ldrh	r3, [r5, #12]
 8001390:	065b      	lsls	r3, r3, #25
 8001392:	f53f af2d 	bmi.w	80011f0 <_svfiprintf_r+0x28>
 8001396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001398:	e72c      	b.n	80011f4 <_svfiprintf_r+0x2c>
 800139a:	ab03      	add	r3, sp, #12
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	462a      	mov	r2, r5
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <_svfiprintf_r+0x1f0>)
 80013a2:	a904      	add	r1, sp, #16
 80013a4:	4638      	mov	r0, r7
 80013a6:	f000 f879 	bl	800149c <_printf_i>
 80013aa:	e7ed      	b.n	8001388 <_svfiprintf_r+0x1c0>
 80013ac:	08002173 	.word	0x08002173
 80013b0:	0800217d 	.word	0x0800217d
 80013b4:	00000000 	.word	0x00000000
 80013b8:	08001111 	.word	0x08001111
 80013bc:	08002179 	.word	0x08002179

080013c0 <_printf_common>:
 80013c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c4:	4616      	mov	r6, r2
 80013c6:	4698      	mov	r8, r3
 80013c8:	688a      	ldr	r2, [r1, #8]
 80013ca:	690b      	ldr	r3, [r1, #16]
 80013cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bfb8      	it	lt
 80013d4:	4613      	movlt	r3, r2
 80013d6:	6033      	str	r3, [r6, #0]
 80013d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80013dc:	4607      	mov	r7, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	b10a      	cbz	r2, 80013e6 <_printf_common+0x26>
 80013e2:	3301      	adds	r3, #1
 80013e4:	6033      	str	r3, [r6, #0]
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	0699      	lsls	r1, r3, #26
 80013ea:	bf42      	ittt	mi
 80013ec:	6833      	ldrmi	r3, [r6, #0]
 80013ee:	3302      	addmi	r3, #2
 80013f0:	6033      	strmi	r3, [r6, #0]
 80013f2:	6825      	ldr	r5, [r4, #0]
 80013f4:	f015 0506 	ands.w	r5, r5, #6
 80013f8:	d106      	bne.n	8001408 <_printf_common+0x48>
 80013fa:	f104 0a19 	add.w	sl, r4, #25
 80013fe:	68e3      	ldr	r3, [r4, #12]
 8001400:	6832      	ldr	r2, [r6, #0]
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	42ab      	cmp	r3, r5
 8001406:	dc26      	bgt.n	8001456 <_printf_common+0x96>
 8001408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	3b00      	subs	r3, #0
 8001410:	bf18      	it	ne
 8001412:	2301      	movne	r3, #1
 8001414:	0692      	lsls	r2, r2, #26
 8001416:	d42b      	bmi.n	8001470 <_printf_common+0xb0>
 8001418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800141c:	4641      	mov	r1, r8
 800141e:	4638      	mov	r0, r7
 8001420:	47c8      	blx	r9
 8001422:	3001      	adds	r0, #1
 8001424:	d01e      	beq.n	8001464 <_printf_common+0xa4>
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	6922      	ldr	r2, [r4, #16]
 800142a:	f003 0306 	and.w	r3, r3, #6
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf02      	ittt	eq
 8001432:	68e5      	ldreq	r5, [r4, #12]
 8001434:	6833      	ldreq	r3, [r6, #0]
 8001436:	1aed      	subeq	r5, r5, r3
 8001438:	68a3      	ldr	r3, [r4, #8]
 800143a:	bf0c      	ite	eq
 800143c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001440:	2500      	movne	r5, #0
 8001442:	4293      	cmp	r3, r2
 8001444:	bfc4      	itt	gt
 8001446:	1a9b      	subgt	r3, r3, r2
 8001448:	18ed      	addgt	r5, r5, r3
 800144a:	2600      	movs	r6, #0
 800144c:	341a      	adds	r4, #26
 800144e:	42b5      	cmp	r5, r6
 8001450:	d11a      	bne.n	8001488 <_printf_common+0xc8>
 8001452:	2000      	movs	r0, #0
 8001454:	e008      	b.n	8001468 <_printf_common+0xa8>
 8001456:	2301      	movs	r3, #1
 8001458:	4652      	mov	r2, sl
 800145a:	4641      	mov	r1, r8
 800145c:	4638      	mov	r0, r7
 800145e:	47c8      	blx	r9
 8001460:	3001      	adds	r0, #1
 8001462:	d103      	bne.n	800146c <_printf_common+0xac>
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146c:	3501      	adds	r5, #1
 800146e:	e7c6      	b.n	80013fe <_printf_common+0x3e>
 8001470:	18e1      	adds	r1, r4, r3
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	2030      	movs	r0, #48	@ 0x30
 8001476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800147a:	4422      	add	r2, r4
 800147c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001484:	3302      	adds	r3, #2
 8001486:	e7c7      	b.n	8001418 <_printf_common+0x58>
 8001488:	2301      	movs	r3, #1
 800148a:	4622      	mov	r2, r4
 800148c:	4641      	mov	r1, r8
 800148e:	4638      	mov	r0, r7
 8001490:	47c8      	blx	r9
 8001492:	3001      	adds	r0, #1
 8001494:	d0e6      	beq.n	8001464 <_printf_common+0xa4>
 8001496:	3601      	adds	r6, #1
 8001498:	e7d9      	b.n	800144e <_printf_common+0x8e>
	...

0800149c <_printf_i>:
 800149c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	7e0f      	ldrb	r7, [r1, #24]
 80014a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80014a4:	2f78      	cmp	r7, #120	@ 0x78
 80014a6:	4691      	mov	r9, r2
 80014a8:	4680      	mov	r8, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	469a      	mov	sl, r3
 80014ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80014b2:	d807      	bhi.n	80014c4 <_printf_i+0x28>
 80014b4:	2f62      	cmp	r7, #98	@ 0x62
 80014b6:	d80a      	bhi.n	80014ce <_printf_i+0x32>
 80014b8:	2f00      	cmp	r7, #0
 80014ba:	f000 80d2 	beq.w	8001662 <_printf_i+0x1c6>
 80014be:	2f58      	cmp	r7, #88	@ 0x58
 80014c0:	f000 80b9 	beq.w	8001636 <_printf_i+0x19a>
 80014c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80014cc:	e03a      	b.n	8001544 <_printf_i+0xa8>
 80014ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80014d2:	2b15      	cmp	r3, #21
 80014d4:	d8f6      	bhi.n	80014c4 <_printf_i+0x28>
 80014d6:	a101      	add	r1, pc, #4	@ (adr r1, 80014dc <_printf_i+0x40>)
 80014d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014dc:	08001535 	.word	0x08001535
 80014e0:	08001549 	.word	0x08001549
 80014e4:	080014c5 	.word	0x080014c5
 80014e8:	080014c5 	.word	0x080014c5
 80014ec:	080014c5 	.word	0x080014c5
 80014f0:	080014c5 	.word	0x080014c5
 80014f4:	08001549 	.word	0x08001549
 80014f8:	080014c5 	.word	0x080014c5
 80014fc:	080014c5 	.word	0x080014c5
 8001500:	080014c5 	.word	0x080014c5
 8001504:	080014c5 	.word	0x080014c5
 8001508:	08001649 	.word	0x08001649
 800150c:	08001573 	.word	0x08001573
 8001510:	08001603 	.word	0x08001603
 8001514:	080014c5 	.word	0x080014c5
 8001518:	080014c5 	.word	0x080014c5
 800151c:	0800166b 	.word	0x0800166b
 8001520:	080014c5 	.word	0x080014c5
 8001524:	08001573 	.word	0x08001573
 8001528:	080014c5 	.word	0x080014c5
 800152c:	080014c5 	.word	0x080014c5
 8001530:	0800160b 	.word	0x0800160b
 8001534:	6833      	ldr	r3, [r6, #0]
 8001536:	1d1a      	adds	r2, r3, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6032      	str	r2, [r6, #0]
 800153c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001544:	2301      	movs	r3, #1
 8001546:	e09d      	b.n	8001684 <_printf_i+0x1e8>
 8001548:	6833      	ldr	r3, [r6, #0]
 800154a:	6820      	ldr	r0, [r4, #0]
 800154c:	1d19      	adds	r1, r3, #4
 800154e:	6031      	str	r1, [r6, #0]
 8001550:	0606      	lsls	r6, r0, #24
 8001552:	d501      	bpl.n	8001558 <_printf_i+0xbc>
 8001554:	681d      	ldr	r5, [r3, #0]
 8001556:	e003      	b.n	8001560 <_printf_i+0xc4>
 8001558:	0645      	lsls	r5, r0, #25
 800155a:	d5fb      	bpl.n	8001554 <_printf_i+0xb8>
 800155c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001560:	2d00      	cmp	r5, #0
 8001562:	da03      	bge.n	800156c <_printf_i+0xd0>
 8001564:	232d      	movs	r3, #45	@ 0x2d
 8001566:	426d      	negs	r5, r5
 8001568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800156c:	4859      	ldr	r0, [pc, #356]	@ (80016d4 <_printf_i+0x238>)
 800156e:	230a      	movs	r3, #10
 8001570:	e011      	b.n	8001596 <_printf_i+0xfa>
 8001572:	6821      	ldr	r1, [r4, #0]
 8001574:	6833      	ldr	r3, [r6, #0]
 8001576:	0608      	lsls	r0, r1, #24
 8001578:	f853 5b04 	ldr.w	r5, [r3], #4
 800157c:	d402      	bmi.n	8001584 <_printf_i+0xe8>
 800157e:	0649      	lsls	r1, r1, #25
 8001580:	bf48      	it	mi
 8001582:	b2ad      	uxthmi	r5, r5
 8001584:	2f6f      	cmp	r7, #111	@ 0x6f
 8001586:	4853      	ldr	r0, [pc, #332]	@ (80016d4 <_printf_i+0x238>)
 8001588:	6033      	str	r3, [r6, #0]
 800158a:	bf14      	ite	ne
 800158c:	230a      	movne	r3, #10
 800158e:	2308      	moveq	r3, #8
 8001590:	2100      	movs	r1, #0
 8001592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001596:	6866      	ldr	r6, [r4, #4]
 8001598:	60a6      	str	r6, [r4, #8]
 800159a:	2e00      	cmp	r6, #0
 800159c:	bfa2      	ittt	ge
 800159e:	6821      	ldrge	r1, [r4, #0]
 80015a0:	f021 0104 	bicge.w	r1, r1, #4
 80015a4:	6021      	strge	r1, [r4, #0]
 80015a6:	b90d      	cbnz	r5, 80015ac <_printf_i+0x110>
 80015a8:	2e00      	cmp	r6, #0
 80015aa:	d04b      	beq.n	8001644 <_printf_i+0x1a8>
 80015ac:	4616      	mov	r6, r2
 80015ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80015b2:	fb03 5711 	mls	r7, r3, r1, r5
 80015b6:	5dc7      	ldrb	r7, [r0, r7]
 80015b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015bc:	462f      	mov	r7, r5
 80015be:	42bb      	cmp	r3, r7
 80015c0:	460d      	mov	r5, r1
 80015c2:	d9f4      	bls.n	80015ae <_printf_i+0x112>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d10b      	bne.n	80015e0 <_printf_i+0x144>
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	07df      	lsls	r7, r3, #31
 80015cc:	d508      	bpl.n	80015e0 <_printf_i+0x144>
 80015ce:	6923      	ldr	r3, [r4, #16]
 80015d0:	6861      	ldr	r1, [r4, #4]
 80015d2:	4299      	cmp	r1, r3
 80015d4:	bfde      	ittt	le
 80015d6:	2330      	movle	r3, #48	@ 0x30
 80015d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015e0:	1b92      	subs	r2, r2, r6
 80015e2:	6122      	str	r2, [r4, #16]
 80015e4:	f8cd a000 	str.w	sl, [sp]
 80015e8:	464b      	mov	r3, r9
 80015ea:	aa03      	add	r2, sp, #12
 80015ec:	4621      	mov	r1, r4
 80015ee:	4640      	mov	r0, r8
 80015f0:	f7ff fee6 	bl	80013c0 <_printf_common>
 80015f4:	3001      	adds	r0, #1
 80015f6:	d14a      	bne.n	800168e <_printf_i+0x1f2>
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	b004      	add	sp, #16
 80015fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	4833      	ldr	r0, [pc, #204]	@ (80016d8 <_printf_i+0x23c>)
 800160c:	2778      	movs	r7, #120	@ 0x78
 800160e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	6831      	ldr	r1, [r6, #0]
 8001616:	061f      	lsls	r7, r3, #24
 8001618:	f851 5b04 	ldr.w	r5, [r1], #4
 800161c:	d402      	bmi.n	8001624 <_printf_i+0x188>
 800161e:	065f      	lsls	r7, r3, #25
 8001620:	bf48      	it	mi
 8001622:	b2ad      	uxthmi	r5, r5
 8001624:	6031      	str	r1, [r6, #0]
 8001626:	07d9      	lsls	r1, r3, #31
 8001628:	bf44      	itt	mi
 800162a:	f043 0320 	orrmi.w	r3, r3, #32
 800162e:	6023      	strmi	r3, [r4, #0]
 8001630:	b11d      	cbz	r5, 800163a <_printf_i+0x19e>
 8001632:	2310      	movs	r3, #16
 8001634:	e7ac      	b.n	8001590 <_printf_i+0xf4>
 8001636:	4827      	ldr	r0, [pc, #156]	@ (80016d4 <_printf_i+0x238>)
 8001638:	e7e9      	b.n	800160e <_printf_i+0x172>
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	f023 0320 	bic.w	r3, r3, #32
 8001640:	6023      	str	r3, [r4, #0]
 8001642:	e7f6      	b.n	8001632 <_printf_i+0x196>
 8001644:	4616      	mov	r6, r2
 8001646:	e7bd      	b.n	80015c4 <_printf_i+0x128>
 8001648:	6833      	ldr	r3, [r6, #0]
 800164a:	6825      	ldr	r5, [r4, #0]
 800164c:	6961      	ldr	r1, [r4, #20]
 800164e:	1d18      	adds	r0, r3, #4
 8001650:	6030      	str	r0, [r6, #0]
 8001652:	062e      	lsls	r6, r5, #24
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	d501      	bpl.n	800165c <_printf_i+0x1c0>
 8001658:	6019      	str	r1, [r3, #0]
 800165a:	e002      	b.n	8001662 <_printf_i+0x1c6>
 800165c:	0668      	lsls	r0, r5, #25
 800165e:	d5fb      	bpl.n	8001658 <_printf_i+0x1bc>
 8001660:	8019      	strh	r1, [r3, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	6123      	str	r3, [r4, #16]
 8001666:	4616      	mov	r6, r2
 8001668:	e7bc      	b.n	80015e4 <_printf_i+0x148>
 800166a:	6833      	ldr	r3, [r6, #0]
 800166c:	1d1a      	adds	r2, r3, #4
 800166e:	6032      	str	r2, [r6, #0]
 8001670:	681e      	ldr	r6, [r3, #0]
 8001672:	6862      	ldr	r2, [r4, #4]
 8001674:	2100      	movs	r1, #0
 8001676:	4630      	mov	r0, r6
 8001678:	f7fe fdc2 	bl	8000200 <memchr>
 800167c:	b108      	cbz	r0, 8001682 <_printf_i+0x1e6>
 800167e:	1b80      	subs	r0, r0, r6
 8001680:	6060      	str	r0, [r4, #4]
 8001682:	6863      	ldr	r3, [r4, #4]
 8001684:	6123      	str	r3, [r4, #16]
 8001686:	2300      	movs	r3, #0
 8001688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800168c:	e7aa      	b.n	80015e4 <_printf_i+0x148>
 800168e:	6923      	ldr	r3, [r4, #16]
 8001690:	4632      	mov	r2, r6
 8001692:	4649      	mov	r1, r9
 8001694:	4640      	mov	r0, r8
 8001696:	47d0      	blx	sl
 8001698:	3001      	adds	r0, #1
 800169a:	d0ad      	beq.n	80015f8 <_printf_i+0x15c>
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	079b      	lsls	r3, r3, #30
 80016a0:	d413      	bmi.n	80016ca <_printf_i+0x22e>
 80016a2:	68e0      	ldr	r0, [r4, #12]
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	4298      	cmp	r0, r3
 80016a8:	bfb8      	it	lt
 80016aa:	4618      	movlt	r0, r3
 80016ac:	e7a6      	b.n	80015fc <_printf_i+0x160>
 80016ae:	2301      	movs	r3, #1
 80016b0:	4632      	mov	r2, r6
 80016b2:	4649      	mov	r1, r9
 80016b4:	4640      	mov	r0, r8
 80016b6:	47d0      	blx	sl
 80016b8:	3001      	adds	r0, #1
 80016ba:	d09d      	beq.n	80015f8 <_printf_i+0x15c>
 80016bc:	3501      	adds	r5, #1
 80016be:	68e3      	ldr	r3, [r4, #12]
 80016c0:	9903      	ldr	r1, [sp, #12]
 80016c2:	1a5b      	subs	r3, r3, r1
 80016c4:	42ab      	cmp	r3, r5
 80016c6:	dcf2      	bgt.n	80016ae <_printf_i+0x212>
 80016c8:	e7eb      	b.n	80016a2 <_printf_i+0x206>
 80016ca:	2500      	movs	r5, #0
 80016cc:	f104 0619 	add.w	r6, r4, #25
 80016d0:	e7f5      	b.n	80016be <_printf_i+0x222>
 80016d2:	bf00      	nop
 80016d4:	08002184 	.word	0x08002184
 80016d8:	08002195 	.word	0x08002195

080016dc <__sflush_r>:
 80016dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016e4:	0716      	lsls	r6, r2, #28
 80016e6:	4605      	mov	r5, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	d454      	bmi.n	8001796 <__sflush_r+0xba>
 80016ec:	684b      	ldr	r3, [r1, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dc02      	bgt.n	80016f8 <__sflush_r+0x1c>
 80016f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd48      	ble.n	800178a <__sflush_r+0xae>
 80016f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016fa:	2e00      	cmp	r6, #0
 80016fc:	d045      	beq.n	800178a <__sflush_r+0xae>
 80016fe:	2300      	movs	r3, #0
 8001700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001704:	682f      	ldr	r7, [r5, #0]
 8001706:	6a21      	ldr	r1, [r4, #32]
 8001708:	602b      	str	r3, [r5, #0]
 800170a:	d030      	beq.n	800176e <__sflush_r+0x92>
 800170c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800170e:	89a3      	ldrh	r3, [r4, #12]
 8001710:	0759      	lsls	r1, r3, #29
 8001712:	d505      	bpl.n	8001720 <__sflush_r+0x44>
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800171a:	b10b      	cbz	r3, 8001720 <__sflush_r+0x44>
 800171c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800171e:	1ad2      	subs	r2, r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001724:	6a21      	ldr	r1, [r4, #32]
 8001726:	4628      	mov	r0, r5
 8001728:	47b0      	blx	r6
 800172a:	1c43      	adds	r3, r0, #1
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	d106      	bne.n	800173e <__sflush_r+0x62>
 8001730:	6829      	ldr	r1, [r5, #0]
 8001732:	291d      	cmp	r1, #29
 8001734:	d82b      	bhi.n	800178e <__sflush_r+0xb2>
 8001736:	4a2a      	ldr	r2, [pc, #168]	@ (80017e0 <__sflush_r+0x104>)
 8001738:	410a      	asrs	r2, r1
 800173a:	07d6      	lsls	r6, r2, #31
 800173c:	d427      	bmi.n	800178e <__sflush_r+0xb2>
 800173e:	2200      	movs	r2, #0
 8001740:	6062      	str	r2, [r4, #4]
 8001742:	04d9      	lsls	r1, r3, #19
 8001744:	6922      	ldr	r2, [r4, #16]
 8001746:	6022      	str	r2, [r4, #0]
 8001748:	d504      	bpl.n	8001754 <__sflush_r+0x78>
 800174a:	1c42      	adds	r2, r0, #1
 800174c:	d101      	bne.n	8001752 <__sflush_r+0x76>
 800174e:	682b      	ldr	r3, [r5, #0]
 8001750:	b903      	cbnz	r3, 8001754 <__sflush_r+0x78>
 8001752:	6560      	str	r0, [r4, #84]	@ 0x54
 8001754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001756:	602f      	str	r7, [r5, #0]
 8001758:	b1b9      	cbz	r1, 800178a <__sflush_r+0xae>
 800175a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800175e:	4299      	cmp	r1, r3
 8001760:	d002      	beq.n	8001768 <__sflush_r+0x8c>
 8001762:	4628      	mov	r0, r5
 8001764:	f7ff fbd4 	bl	8000f10 <_free_r>
 8001768:	2300      	movs	r3, #0
 800176a:	6363      	str	r3, [r4, #52]	@ 0x34
 800176c:	e00d      	b.n	800178a <__sflush_r+0xae>
 800176e:	2301      	movs	r3, #1
 8001770:	4628      	mov	r0, r5
 8001772:	47b0      	blx	r6
 8001774:	4602      	mov	r2, r0
 8001776:	1c50      	adds	r0, r2, #1
 8001778:	d1c9      	bne.n	800170e <__sflush_r+0x32>
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0c6      	beq.n	800170e <__sflush_r+0x32>
 8001780:	2b1d      	cmp	r3, #29
 8001782:	d001      	beq.n	8001788 <__sflush_r+0xac>
 8001784:	2b16      	cmp	r3, #22
 8001786:	d11e      	bne.n	80017c6 <__sflush_r+0xea>
 8001788:	602f      	str	r7, [r5, #0]
 800178a:	2000      	movs	r0, #0
 800178c:	e022      	b.n	80017d4 <__sflush_r+0xf8>
 800178e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001792:	b21b      	sxth	r3, r3
 8001794:	e01b      	b.n	80017ce <__sflush_r+0xf2>
 8001796:	690f      	ldr	r7, [r1, #16]
 8001798:	2f00      	cmp	r7, #0
 800179a:	d0f6      	beq.n	800178a <__sflush_r+0xae>
 800179c:	0793      	lsls	r3, r2, #30
 800179e:	680e      	ldr	r6, [r1, #0]
 80017a0:	bf08      	it	eq
 80017a2:	694b      	ldreq	r3, [r1, #20]
 80017a4:	600f      	str	r7, [r1, #0]
 80017a6:	bf18      	it	ne
 80017a8:	2300      	movne	r3, #0
 80017aa:	eba6 0807 	sub.w	r8, r6, r7
 80017ae:	608b      	str	r3, [r1, #8]
 80017b0:	f1b8 0f00 	cmp.w	r8, #0
 80017b4:	dde9      	ble.n	800178a <__sflush_r+0xae>
 80017b6:	6a21      	ldr	r1, [r4, #32]
 80017b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80017ba:	4643      	mov	r3, r8
 80017bc:	463a      	mov	r2, r7
 80017be:	4628      	mov	r0, r5
 80017c0:	47b0      	blx	r6
 80017c2:	2800      	cmp	r0, #0
 80017c4:	dc08      	bgt.n	80017d8 <__sflush_r+0xfc>
 80017c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ce:	81a3      	strh	r3, [r4, #12]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d8:	4407      	add	r7, r0
 80017da:	eba8 0800 	sub.w	r8, r8, r0
 80017de:	e7e7      	b.n	80017b0 <__sflush_r+0xd4>
 80017e0:	dfbffffe 	.word	0xdfbffffe

080017e4 <_fflush_r>:
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	690b      	ldr	r3, [r1, #16]
 80017e8:	4605      	mov	r5, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	b913      	cbnz	r3, 80017f4 <_fflush_r+0x10>
 80017ee:	2500      	movs	r5, #0
 80017f0:	4628      	mov	r0, r5
 80017f2:	bd38      	pop	{r3, r4, r5, pc}
 80017f4:	b118      	cbz	r0, 80017fe <_fflush_r+0x1a>
 80017f6:	6a03      	ldr	r3, [r0, #32]
 80017f8:	b90b      	cbnz	r3, 80017fe <_fflush_r+0x1a>
 80017fa:	f7ff f9f9 	bl	8000bf0 <__sinit>
 80017fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f3      	beq.n	80017ee <_fflush_r+0xa>
 8001806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001808:	07d0      	lsls	r0, r2, #31
 800180a:	d404      	bmi.n	8001816 <_fflush_r+0x32>
 800180c:	0599      	lsls	r1, r3, #22
 800180e:	d402      	bmi.n	8001816 <_fflush_r+0x32>
 8001810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001812:	f7ff fb5c 	bl	8000ece <__retarget_lock_acquire_recursive>
 8001816:	4628      	mov	r0, r5
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff ff5f 	bl	80016dc <__sflush_r>
 800181e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001820:	07da      	lsls	r2, r3, #31
 8001822:	4605      	mov	r5, r0
 8001824:	d4e4      	bmi.n	80017f0 <_fflush_r+0xc>
 8001826:	89a3      	ldrh	r3, [r4, #12]
 8001828:	059b      	lsls	r3, r3, #22
 800182a:	d4e1      	bmi.n	80017f0 <_fflush_r+0xc>
 800182c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800182e:	f7ff fb4f 	bl	8000ed0 <__retarget_lock_release_recursive>
 8001832:	e7dd      	b.n	80017f0 <_fflush_r+0xc>

08001834 <fiprintf>:
 8001834:	b40e      	push	{r1, r2, r3}
 8001836:	b503      	push	{r0, r1, lr}
 8001838:	4601      	mov	r1, r0
 800183a:	ab03      	add	r3, sp, #12
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <fiprintf+0x20>)
 800183e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001842:	6800      	ldr	r0, [r0, #0]
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	f000 f89d 	bl	8001984 <_vfiprintf_r>
 800184a:	b002      	add	sp, #8
 800184c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001850:	b003      	add	sp, #12
 8001852:	4770      	bx	lr
 8001854:	2000001c 	.word	0x2000001c

08001858 <memmove>:
 8001858:	4288      	cmp	r0, r1
 800185a:	b510      	push	{r4, lr}
 800185c:	eb01 0402 	add.w	r4, r1, r2
 8001860:	d902      	bls.n	8001868 <memmove+0x10>
 8001862:	4284      	cmp	r4, r0
 8001864:	4623      	mov	r3, r4
 8001866:	d807      	bhi.n	8001878 <memmove+0x20>
 8001868:	1e43      	subs	r3, r0, #1
 800186a:	42a1      	cmp	r1, r4
 800186c:	d008      	beq.n	8001880 <memmove+0x28>
 800186e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001876:	e7f8      	b.n	800186a <memmove+0x12>
 8001878:	4402      	add	r2, r0
 800187a:	4601      	mov	r1, r0
 800187c:	428a      	cmp	r2, r1
 800187e:	d100      	bne.n	8001882 <memmove+0x2a>
 8001880:	bd10      	pop	{r4, pc}
 8001882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800188a:	e7f7      	b.n	800187c <memmove+0x24>

0800188c <_sbrk_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d06      	ldr	r5, [pc, #24]	@ (80018a8 <_sbrk_r+0x1c>)
 8001890:	2300      	movs	r3, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	602b      	str	r3, [r5, #0]
 8001898:	f7fe ff36 	bl	8000708 <_sbrk>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_sbrk_r+0x1a>
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_sbrk_r+0x1a>
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200001c8 	.word	0x200001c8

080018ac <memcpy>:
 80018ac:	440a      	add	r2, r1
 80018ae:	4291      	cmp	r1, r2
 80018b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80018b4:	d100      	bne.n	80018b8 <memcpy+0xc>
 80018b6:	4770      	bx	lr
 80018b8:	b510      	push	{r4, lr}
 80018ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018c2:	4291      	cmp	r1, r2
 80018c4:	d1f9      	bne.n	80018ba <memcpy+0xe>
 80018c6:	bd10      	pop	{r4, pc}

080018c8 <abort>:
 80018c8:	b508      	push	{r3, lr}
 80018ca:	2006      	movs	r0, #6
 80018cc:	f000 fa2e 	bl	8001d2c <raise>
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7fe fea0 	bl	8000616 <_exit>

080018d6 <_realloc_r>:
 80018d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018da:	4680      	mov	r8, r0
 80018dc:	4615      	mov	r5, r2
 80018de:	460c      	mov	r4, r1
 80018e0:	b921      	cbnz	r1, 80018ec <_realloc_r+0x16>
 80018e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018e6:	4611      	mov	r1, r2
 80018e8:	f7ff bb86 	b.w	8000ff8 <_malloc_r>
 80018ec:	b92a      	cbnz	r2, 80018fa <_realloc_r+0x24>
 80018ee:	f7ff fb0f 	bl	8000f10 <_free_r>
 80018f2:	2400      	movs	r4, #0
 80018f4:	4620      	mov	r0, r4
 80018f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018fa:	f000 fa33 	bl	8001d64 <_malloc_usable_size_r>
 80018fe:	4285      	cmp	r5, r0
 8001900:	4606      	mov	r6, r0
 8001902:	d802      	bhi.n	800190a <_realloc_r+0x34>
 8001904:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001908:	d8f4      	bhi.n	80018f4 <_realloc_r+0x1e>
 800190a:	4629      	mov	r1, r5
 800190c:	4640      	mov	r0, r8
 800190e:	f7ff fb73 	bl	8000ff8 <_malloc_r>
 8001912:	4607      	mov	r7, r0
 8001914:	2800      	cmp	r0, #0
 8001916:	d0ec      	beq.n	80018f2 <_realloc_r+0x1c>
 8001918:	42b5      	cmp	r5, r6
 800191a:	462a      	mov	r2, r5
 800191c:	4621      	mov	r1, r4
 800191e:	bf28      	it	cs
 8001920:	4632      	movcs	r2, r6
 8001922:	f7ff ffc3 	bl	80018ac <memcpy>
 8001926:	4621      	mov	r1, r4
 8001928:	4640      	mov	r0, r8
 800192a:	f7ff faf1 	bl	8000f10 <_free_r>
 800192e:	463c      	mov	r4, r7
 8001930:	e7e0      	b.n	80018f4 <_realloc_r+0x1e>

08001932 <__sfputc_r>:
 8001932:	6893      	ldr	r3, [r2, #8]
 8001934:	3b01      	subs	r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	b410      	push	{r4}
 800193a:	6093      	str	r3, [r2, #8]
 800193c:	da08      	bge.n	8001950 <__sfputc_r+0x1e>
 800193e:	6994      	ldr	r4, [r2, #24]
 8001940:	42a3      	cmp	r3, r4
 8001942:	db01      	blt.n	8001948 <__sfputc_r+0x16>
 8001944:	290a      	cmp	r1, #10
 8001946:	d103      	bne.n	8001950 <__sfputc_r+0x1e>
 8001948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800194c:	f000 b932 	b.w	8001bb4 <__swbuf_r>
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	1c58      	adds	r0, r3, #1
 8001954:	6010      	str	r0, [r2, #0]
 8001956:	7019      	strb	r1, [r3, #0]
 8001958:	4608      	mov	r0, r1
 800195a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800195e:	4770      	bx	lr

08001960 <__sfputs_r>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	4606      	mov	r6, r0
 8001964:	460f      	mov	r7, r1
 8001966:	4614      	mov	r4, r2
 8001968:	18d5      	adds	r5, r2, r3
 800196a:	42ac      	cmp	r4, r5
 800196c:	d101      	bne.n	8001972 <__sfputs_r+0x12>
 800196e:	2000      	movs	r0, #0
 8001970:	e007      	b.n	8001982 <__sfputs_r+0x22>
 8001972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001976:	463a      	mov	r2, r7
 8001978:	4630      	mov	r0, r6
 800197a:	f7ff ffda 	bl	8001932 <__sfputc_r>
 800197e:	1c43      	adds	r3, r0, #1
 8001980:	d1f3      	bne.n	800196a <__sfputs_r+0xa>
 8001982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001984 <_vfiprintf_r>:
 8001984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001988:	460d      	mov	r5, r1
 800198a:	b09d      	sub	sp, #116	@ 0x74
 800198c:	4614      	mov	r4, r2
 800198e:	4698      	mov	r8, r3
 8001990:	4606      	mov	r6, r0
 8001992:	b118      	cbz	r0, 800199c <_vfiprintf_r+0x18>
 8001994:	6a03      	ldr	r3, [r0, #32]
 8001996:	b90b      	cbnz	r3, 800199c <_vfiprintf_r+0x18>
 8001998:	f7ff f92a 	bl	8000bf0 <__sinit>
 800199c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800199e:	07d9      	lsls	r1, r3, #31
 80019a0:	d405      	bmi.n	80019ae <_vfiprintf_r+0x2a>
 80019a2:	89ab      	ldrh	r3, [r5, #12]
 80019a4:	059a      	lsls	r2, r3, #22
 80019a6:	d402      	bmi.n	80019ae <_vfiprintf_r+0x2a>
 80019a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019aa:	f7ff fa90 	bl	8000ece <__retarget_lock_acquire_recursive>
 80019ae:	89ab      	ldrh	r3, [r5, #12]
 80019b0:	071b      	lsls	r3, r3, #28
 80019b2:	d501      	bpl.n	80019b8 <_vfiprintf_r+0x34>
 80019b4:	692b      	ldr	r3, [r5, #16]
 80019b6:	b99b      	cbnz	r3, 80019e0 <_vfiprintf_r+0x5c>
 80019b8:	4629      	mov	r1, r5
 80019ba:	4630      	mov	r0, r6
 80019bc:	f000 f938 	bl	8001c30 <__swsetup_r>
 80019c0:	b170      	cbz	r0, 80019e0 <_vfiprintf_r+0x5c>
 80019c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019c4:	07dc      	lsls	r4, r3, #31
 80019c6:	d504      	bpl.n	80019d2 <_vfiprintf_r+0x4e>
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	b01d      	add	sp, #116	@ 0x74
 80019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019d2:	89ab      	ldrh	r3, [r5, #12]
 80019d4:	0598      	lsls	r0, r3, #22
 80019d6:	d4f7      	bmi.n	80019c8 <_vfiprintf_r+0x44>
 80019d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019da:	f7ff fa79 	bl	8000ed0 <__retarget_lock_release_recursive>
 80019de:	e7f3      	b.n	80019c8 <_vfiprintf_r+0x44>
 80019e0:	2300      	movs	r3, #0
 80019e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80019e4:	2320      	movs	r3, #32
 80019e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80019ee:	2330      	movs	r3, #48	@ 0x30
 80019f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001ba0 <_vfiprintf_r+0x21c>
 80019f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019f8:	f04f 0901 	mov.w	r9, #1
 80019fc:	4623      	mov	r3, r4
 80019fe:	469a      	mov	sl, r3
 8001a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a04:	b10a      	cbz	r2, 8001a0a <_vfiprintf_r+0x86>
 8001a06:	2a25      	cmp	r2, #37	@ 0x25
 8001a08:	d1f9      	bne.n	80019fe <_vfiprintf_r+0x7a>
 8001a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8001a0e:	d00b      	beq.n	8001a28 <_vfiprintf_r+0xa4>
 8001a10:	465b      	mov	r3, fp
 8001a12:	4622      	mov	r2, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	4630      	mov	r0, r6
 8001a18:	f7ff ffa2 	bl	8001960 <__sfputs_r>
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	f000 80a7 	beq.w	8001b70 <_vfiprintf_r+0x1ec>
 8001a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a24:	445a      	add	r2, fp
 8001a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a28:	f89a 3000 	ldrb.w	r3, [sl]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 809f 	beq.w	8001b70 <_vfiprintf_r+0x1ec>
 8001a32:	2300      	movs	r3, #0
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a3c:	f10a 0a01 	add.w	sl, sl, #1
 8001a40:	9304      	str	r3, [sp, #16]
 8001a42:	9307      	str	r3, [sp, #28]
 8001a44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a48:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a4a:	4654      	mov	r4, sl
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a52:	4853      	ldr	r0, [pc, #332]	@ (8001ba0 <_vfiprintf_r+0x21c>)
 8001a54:	f7fe fbd4 	bl	8000200 <memchr>
 8001a58:	9a04      	ldr	r2, [sp, #16]
 8001a5a:	b9d8      	cbnz	r0, 8001a94 <_vfiprintf_r+0x110>
 8001a5c:	06d1      	lsls	r1, r2, #27
 8001a5e:	bf44      	itt	mi
 8001a60:	2320      	movmi	r3, #32
 8001a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a66:	0713      	lsls	r3, r2, #28
 8001a68:	bf44      	itt	mi
 8001a6a:	232b      	movmi	r3, #43	@ 0x2b
 8001a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a70:	f89a 3000 	ldrb.w	r3, [sl]
 8001a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a76:	d015      	beq.n	8001aa4 <_vfiprintf_r+0x120>
 8001a78:	9a07      	ldr	r2, [sp, #28]
 8001a7a:	4654      	mov	r4, sl
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f04f 0c0a 	mov.w	ip, #10
 8001a82:	4621      	mov	r1, r4
 8001a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a88:	3b30      	subs	r3, #48	@ 0x30
 8001a8a:	2b09      	cmp	r3, #9
 8001a8c:	d94b      	bls.n	8001b26 <_vfiprintf_r+0x1a2>
 8001a8e:	b1b0      	cbz	r0, 8001abe <_vfiprintf_r+0x13a>
 8001a90:	9207      	str	r2, [sp, #28]
 8001a92:	e014      	b.n	8001abe <_vfiprintf_r+0x13a>
 8001a94:	eba0 0308 	sub.w	r3, r0, r8
 8001a98:	fa09 f303 	lsl.w	r3, r9, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	9304      	str	r3, [sp, #16]
 8001aa0:	46a2      	mov	sl, r4
 8001aa2:	e7d2      	b.n	8001a4a <_vfiprintf_r+0xc6>
 8001aa4:	9b03      	ldr	r3, [sp, #12]
 8001aa6:	1d19      	adds	r1, r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	9103      	str	r1, [sp, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bfbb      	ittet	lt
 8001ab0:	425b      	neglt	r3, r3
 8001ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8001ab6:	9307      	strge	r3, [sp, #28]
 8001ab8:	9307      	strlt	r3, [sp, #28]
 8001aba:	bfb8      	it	lt
 8001abc:	9204      	strlt	r2, [sp, #16]
 8001abe:	7823      	ldrb	r3, [r4, #0]
 8001ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ac2:	d10a      	bne.n	8001ada <_vfiprintf_r+0x156>
 8001ac4:	7863      	ldrb	r3, [r4, #1]
 8001ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ac8:	d132      	bne.n	8001b30 <_vfiprintf_r+0x1ac>
 8001aca:	9b03      	ldr	r3, [sp, #12]
 8001acc:	1d1a      	adds	r2, r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	9203      	str	r2, [sp, #12]
 8001ad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ad6:	3402      	adds	r4, #2
 8001ad8:	9305      	str	r3, [sp, #20]
 8001ada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001bb0 <_vfiprintf_r+0x22c>
 8001ade:	7821      	ldrb	r1, [r4, #0]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4650      	mov	r0, sl
 8001ae4:	f7fe fb8c 	bl	8000200 <memchr>
 8001ae8:	b138      	cbz	r0, 8001afa <_vfiprintf_r+0x176>
 8001aea:	9b04      	ldr	r3, [sp, #16]
 8001aec:	eba0 000a 	sub.w	r0, r0, sl
 8001af0:	2240      	movs	r2, #64	@ 0x40
 8001af2:	4082      	lsls	r2, r0
 8001af4:	4313      	orrs	r3, r2
 8001af6:	3401      	adds	r4, #1
 8001af8:	9304      	str	r3, [sp, #16]
 8001afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001afe:	4829      	ldr	r0, [pc, #164]	@ (8001ba4 <_vfiprintf_r+0x220>)
 8001b00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b04:	2206      	movs	r2, #6
 8001b06:	f7fe fb7b 	bl	8000200 <memchr>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d03f      	beq.n	8001b8e <_vfiprintf_r+0x20a>
 8001b0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <_vfiprintf_r+0x224>)
 8001b10:	bb1b      	cbnz	r3, 8001b5a <_vfiprintf_r+0x1d6>
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	3307      	adds	r3, #7
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b20:	443b      	add	r3, r7
 8001b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b24:	e76a      	b.n	80019fc <_vfiprintf_r+0x78>
 8001b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7a8      	b.n	8001a82 <_vfiprintf_r+0xfe>
 8001b30:	2300      	movs	r3, #0
 8001b32:	3401      	adds	r4, #1
 8001b34:	9305      	str	r3, [sp, #20]
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0c0a 	mov.w	ip, #10
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b42:	3a30      	subs	r2, #48	@ 0x30
 8001b44:	2a09      	cmp	r2, #9
 8001b46:	d903      	bls.n	8001b50 <_vfiprintf_r+0x1cc>
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0c6      	beq.n	8001ada <_vfiprintf_r+0x156>
 8001b4c:	9105      	str	r1, [sp, #20]
 8001b4e:	e7c4      	b.n	8001ada <_vfiprintf_r+0x156>
 8001b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b54:	4604      	mov	r4, r0
 8001b56:	2301      	movs	r3, #1
 8001b58:	e7f0      	b.n	8001b3c <_vfiprintf_r+0x1b8>
 8001b5a:	ab03      	add	r3, sp, #12
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	462a      	mov	r2, r5
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <_vfiprintf_r+0x228>)
 8001b62:	a904      	add	r1, sp, #16
 8001b64:	4630      	mov	r0, r6
 8001b66:	f3af 8000 	nop.w
 8001b6a:	4607      	mov	r7, r0
 8001b6c:	1c78      	adds	r0, r7, #1
 8001b6e:	d1d6      	bne.n	8001b1e <_vfiprintf_r+0x19a>
 8001b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b72:	07d9      	lsls	r1, r3, #31
 8001b74:	d405      	bmi.n	8001b82 <_vfiprintf_r+0x1fe>
 8001b76:	89ab      	ldrh	r3, [r5, #12]
 8001b78:	059a      	lsls	r2, r3, #22
 8001b7a:	d402      	bmi.n	8001b82 <_vfiprintf_r+0x1fe>
 8001b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b7e:	f7ff f9a7 	bl	8000ed0 <__retarget_lock_release_recursive>
 8001b82:	89ab      	ldrh	r3, [r5, #12]
 8001b84:	065b      	lsls	r3, r3, #25
 8001b86:	f53f af1f 	bmi.w	80019c8 <_vfiprintf_r+0x44>
 8001b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b8c:	e71e      	b.n	80019cc <_vfiprintf_r+0x48>
 8001b8e:	ab03      	add	r3, sp, #12
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	462a      	mov	r2, r5
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <_vfiprintf_r+0x228>)
 8001b96:	a904      	add	r1, sp, #16
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f7ff fc7f 	bl	800149c <_printf_i>
 8001b9e:	e7e4      	b.n	8001b6a <_vfiprintf_r+0x1e6>
 8001ba0:	08002173 	.word	0x08002173
 8001ba4:	0800217d 	.word	0x0800217d
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	08001961 	.word	0x08001961
 8001bb0:	08002179 	.word	0x08002179

08001bb4 <__swbuf_r>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	460e      	mov	r6, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	4605      	mov	r5, r0
 8001bbc:	b118      	cbz	r0, 8001bc6 <__swbuf_r+0x12>
 8001bbe:	6a03      	ldr	r3, [r0, #32]
 8001bc0:	b90b      	cbnz	r3, 8001bc6 <__swbuf_r+0x12>
 8001bc2:	f7ff f815 	bl	8000bf0 <__sinit>
 8001bc6:	69a3      	ldr	r3, [r4, #24]
 8001bc8:	60a3      	str	r3, [r4, #8]
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	071a      	lsls	r2, r3, #28
 8001bce:	d501      	bpl.n	8001bd4 <__swbuf_r+0x20>
 8001bd0:	6923      	ldr	r3, [r4, #16]
 8001bd2:	b943      	cbnz	r3, 8001be6 <__swbuf_r+0x32>
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f000 f82a 	bl	8001c30 <__swsetup_r>
 8001bdc:	b118      	cbz	r0, 8001be6 <__swbuf_r+0x32>
 8001bde:	f04f 37ff 	mov.w	r7, #4294967295
 8001be2:	4638      	mov	r0, r7
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	6922      	ldr	r2, [r4, #16]
 8001bea:	1a98      	subs	r0, r3, r2
 8001bec:	6963      	ldr	r3, [r4, #20]
 8001bee:	b2f6      	uxtb	r6, r6
 8001bf0:	4283      	cmp	r3, r0
 8001bf2:	4637      	mov	r7, r6
 8001bf4:	dc05      	bgt.n	8001c02 <__swbuf_r+0x4e>
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f7ff fdf3 	bl	80017e4 <_fflush_r>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d1ed      	bne.n	8001bde <__swbuf_r+0x2a>
 8001c02:	68a3      	ldr	r3, [r4, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60a3      	str	r3, [r4, #8]
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	6022      	str	r2, [r4, #0]
 8001c0e:	701e      	strb	r6, [r3, #0]
 8001c10:	6962      	ldr	r2, [r4, #20]
 8001c12:	1c43      	adds	r3, r0, #1
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d004      	beq.n	8001c22 <__swbuf_r+0x6e>
 8001c18:	89a3      	ldrh	r3, [r4, #12]
 8001c1a:	07db      	lsls	r3, r3, #31
 8001c1c:	d5e1      	bpl.n	8001be2 <__swbuf_r+0x2e>
 8001c1e:	2e0a      	cmp	r6, #10
 8001c20:	d1df      	bne.n	8001be2 <__swbuf_r+0x2e>
 8001c22:	4621      	mov	r1, r4
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff fddd 	bl	80017e4 <_fflush_r>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d0d9      	beq.n	8001be2 <__swbuf_r+0x2e>
 8001c2e:	e7d6      	b.n	8001bde <__swbuf_r+0x2a>

08001c30 <__swsetup_r>:
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <__swsetup_r+0xa8>)
 8001c34:	4605      	mov	r5, r0
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	460c      	mov	r4, r1
 8001c3a:	b118      	cbz	r0, 8001c44 <__swsetup_r+0x14>
 8001c3c:	6a03      	ldr	r3, [r0, #32]
 8001c3e:	b90b      	cbnz	r3, 8001c44 <__swsetup_r+0x14>
 8001c40:	f7fe ffd6 	bl	8000bf0 <__sinit>
 8001c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c48:	0719      	lsls	r1, r3, #28
 8001c4a:	d422      	bmi.n	8001c92 <__swsetup_r+0x62>
 8001c4c:	06da      	lsls	r2, r3, #27
 8001c4e:	d407      	bmi.n	8001c60 <__swsetup_r+0x30>
 8001c50:	2209      	movs	r2, #9
 8001c52:	602a      	str	r2, [r5, #0]
 8001c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c58:	81a3      	strh	r3, [r4, #12]
 8001c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5e:	e033      	b.n	8001cc8 <__swsetup_r+0x98>
 8001c60:	0758      	lsls	r0, r3, #29
 8001c62:	d512      	bpl.n	8001c8a <__swsetup_r+0x5a>
 8001c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c66:	b141      	cbz	r1, 8001c7a <__swsetup_r+0x4a>
 8001c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001c6c:	4299      	cmp	r1, r3
 8001c6e:	d002      	beq.n	8001c76 <__swsetup_r+0x46>
 8001c70:	4628      	mov	r0, r5
 8001c72:	f7ff f94d 	bl	8000f10 <_free_r>
 8001c76:	2300      	movs	r3, #0
 8001c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001c80:	81a3      	strh	r3, [r4, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	6063      	str	r3, [r4, #4]
 8001c86:	6923      	ldr	r3, [r4, #16]
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	6923      	ldr	r3, [r4, #16]
 8001c94:	b94b      	cbnz	r3, 8001caa <__swsetup_r+0x7a>
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca0:	d003      	beq.n	8001caa <__swsetup_r+0x7a>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 f88b 	bl	8001dc0 <__smakebuf_r>
 8001caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cae:	f013 0201 	ands.w	r2, r3, #1
 8001cb2:	d00a      	beq.n	8001cca <__swsetup_r+0x9a>
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60a2      	str	r2, [r4, #8]
 8001cb8:	6962      	ldr	r2, [r4, #20]
 8001cba:	4252      	negs	r2, r2
 8001cbc:	61a2      	str	r2, [r4, #24]
 8001cbe:	6922      	ldr	r2, [r4, #16]
 8001cc0:	b942      	cbnz	r2, 8001cd4 <__swsetup_r+0xa4>
 8001cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001cc6:	d1c5      	bne.n	8001c54 <__swsetup_r+0x24>
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
 8001cca:	0799      	lsls	r1, r3, #30
 8001ccc:	bf58      	it	pl
 8001cce:	6962      	ldrpl	r2, [r4, #20]
 8001cd0:	60a2      	str	r2, [r4, #8]
 8001cd2:	e7f4      	b.n	8001cbe <__swsetup_r+0x8e>
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e7f7      	b.n	8001cc8 <__swsetup_r+0x98>
 8001cd8:	2000001c 	.word	0x2000001c

08001cdc <_raise_r>:
 8001cdc:	291f      	cmp	r1, #31
 8001cde:	b538      	push	{r3, r4, r5, lr}
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	d904      	bls.n	8001cf0 <_raise_r+0x14>
 8001ce6:	2316      	movs	r3, #22
 8001ce8:	6003      	str	r3, [r0, #0]
 8001cea:	f04f 30ff 	mov.w	r0, #4294967295
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001cf2:	b112      	cbz	r2, 8001cfa <_raise_r+0x1e>
 8001cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001cf8:	b94b      	cbnz	r3, 8001d0e <_raise_r+0x32>
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 f830 	bl	8001d60 <_getpid_r>
 8001d00:	4622      	mov	r2, r4
 8001d02:	4601      	mov	r1, r0
 8001d04:	4628      	mov	r0, r5
 8001d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d0a:	f000 b817 	b.w	8001d3c <_kill_r>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d00a      	beq.n	8001d28 <_raise_r+0x4c>
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	d103      	bne.n	8001d1e <_raise_r+0x42>
 8001d16:	2316      	movs	r3, #22
 8001d18:	6003      	str	r3, [r0, #0]
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	e7e7      	b.n	8001cee <_raise_r+0x12>
 8001d1e:	2100      	movs	r1, #0
 8001d20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001d24:	4620      	mov	r0, r4
 8001d26:	4798      	blx	r3
 8001d28:	2000      	movs	r0, #0
 8001d2a:	e7e0      	b.n	8001cee <_raise_r+0x12>

08001d2c <raise>:
 8001d2c:	4b02      	ldr	r3, [pc, #8]	@ (8001d38 <raise+0xc>)
 8001d2e:	4601      	mov	r1, r0
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f7ff bfd3 	b.w	8001cdc <_raise_r>
 8001d36:	bf00      	nop
 8001d38:	2000001c 	.word	0x2000001c

08001d3c <_kill_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4d07      	ldr	r5, [pc, #28]	@ (8001d5c <_kill_r+0x20>)
 8001d40:	2300      	movs	r3, #0
 8001d42:	4604      	mov	r4, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	602b      	str	r3, [r5, #0]
 8001d4a:	f7fe fc54 	bl	80005f6 <_kill>
 8001d4e:	1c43      	adds	r3, r0, #1
 8001d50:	d102      	bne.n	8001d58 <_kill_r+0x1c>
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	b103      	cbz	r3, 8001d58 <_kill_r+0x1c>
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	bd38      	pop	{r3, r4, r5, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200001c8 	.word	0x200001c8

08001d60 <_getpid_r>:
 8001d60:	f7fe bc41 	b.w	80005e6 <_getpid>

08001d64 <_malloc_usable_size_r>:
 8001d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d68:	1f18      	subs	r0, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bfbc      	itt	lt
 8001d6e:	580b      	ldrlt	r3, [r1, r0]
 8001d70:	18c0      	addlt	r0, r0, r3
 8001d72:	4770      	bx	lr

08001d74 <__swhatbuf_r>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	460c      	mov	r4, r1
 8001d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	b096      	sub	sp, #88	@ 0x58
 8001d80:	4615      	mov	r5, r2
 8001d82:	461e      	mov	r6, r3
 8001d84:	da0d      	bge.n	8001da2 <__swhatbuf_r+0x2e>
 8001d86:	89a3      	ldrh	r3, [r4, #12]
 8001d88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2340      	movne	r3, #64	@ 0x40
 8001d94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001d98:	2000      	movs	r0, #0
 8001d9a:	6031      	str	r1, [r6, #0]
 8001d9c:	602b      	str	r3, [r5, #0]
 8001d9e:	b016      	add	sp, #88	@ 0x58
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	466a      	mov	r2, sp
 8001da4:	f000 f848 	bl	8001e38 <_fstat_r>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	dbec      	blt.n	8001d86 <__swhatbuf_r+0x12>
 8001dac:	9901      	ldr	r1, [sp, #4]
 8001dae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001db2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001db6:	4259      	negs	r1, r3
 8001db8:	4159      	adcs	r1, r3
 8001dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dbe:	e7eb      	b.n	8001d98 <__swhatbuf_r+0x24>

08001dc0 <__smakebuf_r>:
 8001dc0:	898b      	ldrh	r3, [r1, #12]
 8001dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dc4:	079d      	lsls	r5, r3, #30
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	d507      	bpl.n	8001ddc <__smakebuf_r+0x1c>
 8001dcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	6123      	str	r3, [r4, #16]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	6163      	str	r3, [r4, #20]
 8001dd8:	b003      	add	sp, #12
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	ab01      	add	r3, sp, #4
 8001dde:	466a      	mov	r2, sp
 8001de0:	f7ff ffc8 	bl	8001d74 <__swhatbuf_r>
 8001de4:	9f00      	ldr	r7, [sp, #0]
 8001de6:	4605      	mov	r5, r0
 8001de8:	4639      	mov	r1, r7
 8001dea:	4630      	mov	r0, r6
 8001dec:	f7ff f904 	bl	8000ff8 <_malloc_r>
 8001df0:	b948      	cbnz	r0, 8001e06 <__smakebuf_r+0x46>
 8001df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df6:	059a      	lsls	r2, r3, #22
 8001df8:	d4ee      	bmi.n	8001dd8 <__smakebuf_r+0x18>
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	81a3      	strh	r3, [r4, #12]
 8001e04:	e7e2      	b.n	8001dcc <__smakebuf_r+0xc>
 8001e06:	89a3      	ldrh	r3, [r4, #12]
 8001e08:	6020      	str	r0, [r4, #0]
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0e:	81a3      	strh	r3, [r4, #12]
 8001e10:	9b01      	ldr	r3, [sp, #4]
 8001e12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e16:	b15b      	cbz	r3, 8001e30 <__smakebuf_r+0x70>
 8001e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f000 f81d 	bl	8001e5c <_isatty_r>
 8001e22:	b128      	cbz	r0, 8001e30 <__smakebuf_r+0x70>
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	81a3      	strh	r3, [r4, #12]
 8001e30:	89a3      	ldrh	r3, [r4, #12]
 8001e32:	431d      	orrs	r5, r3
 8001e34:	81a5      	strh	r5, [r4, #12]
 8001e36:	e7cf      	b.n	8001dd8 <__smakebuf_r+0x18>

08001e38 <_fstat_r>:
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4d07      	ldr	r5, [pc, #28]	@ (8001e58 <_fstat_r+0x20>)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	602b      	str	r3, [r5, #0]
 8001e46:	f7fe fc36 	bl	80006b6 <_fstat>
 8001e4a:	1c43      	adds	r3, r0, #1
 8001e4c:	d102      	bne.n	8001e54 <_fstat_r+0x1c>
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	b103      	cbz	r3, 8001e54 <_fstat_r+0x1c>
 8001e52:	6023      	str	r3, [r4, #0]
 8001e54:	bd38      	pop	{r3, r4, r5, pc}
 8001e56:	bf00      	nop
 8001e58:	200001c8 	.word	0x200001c8

08001e5c <_isatty_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4d06      	ldr	r5, [pc, #24]	@ (8001e78 <_isatty_r+0x1c>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	4604      	mov	r4, r0
 8001e64:	4608      	mov	r0, r1
 8001e66:	602b      	str	r3, [r5, #0]
 8001e68:	f7fe fc35 	bl	80006d6 <_isatty>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d102      	bne.n	8001e76 <_isatty_r+0x1a>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b103      	cbz	r3, 8001e76 <_isatty_r+0x1a>
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	200001c8 	.word	0x200001c8

08001e7c <_init>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	bf00      	nop
 8001e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e82:	bc08      	pop	{r3}
 8001e84:	469e      	mov	lr, r3
 8001e86:	4770      	bx	lr

08001e88 <_fini>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	bf00      	nop
 8001e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8e:	bc08      	pop	{r3}
 8001e90:	469e      	mov	lr, r3
 8001e92:	4770      	bx	lr
